<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated file, do not edit -->
<!-- Copyright 2022 Google Inc. All Rights Reserved -->
<wsdl:definitions
  targetNamespace="https://www.google.com/apis/ads/publisher/v202202"
  xmlns:tns="https://www.google.com/apis/ads/publisher/v202202"
  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
  xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <schema elementFormDefault="qualified" jaxb:version="1.0"
      targetNamespace="https://www.google.com/apis/ads/publisher/v202202"
      xmlns="http://www.w3.org/2001/XMLSchema"
      xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:tns="https://www.google.com/apis/ads/publisher/v202202">
      <annotation>
        <appinfo>
          <jaxb:globalBindings typesafeEnumMaxMembers="999999"/>
        </appinfo>
      </annotation>
      <complexType abstract="true" name="ObjectValue">
        <annotation>
          <documentation>
            Contains an object value.
            &lt;p&gt;
            &lt;b&gt;This object is experimental!
            &lt;code&gt;ObjectValue&lt;/code&gt; is an experimental, innovative, and rapidly
            changing new feature for Ad Manager. Unfortunately, being on the bleeding edge means that
            we may make backwards-incompatible changes to
            &lt;code&gt;ObjectValue&lt;/code&gt;. We will inform the community when this feature
            is no longer experimental.&lt;/b&gt;
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ActivateLiveStreamEvents">
        <annotation>
          <documentation>
            The action used for activating {@link LiveStreamEvent} objects.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:LiveStreamEventAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="AdBreakMarkupError">
        <annotation>
          <documentation>
            An error for publisher provided ad break markups in a {@link LiveStreamEvent} which are invalid
            for the given {@link StreamingFormat}.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:AdBreakMarkupError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType abstract="true" name="ApiError">
        <annotation>
          <documentation>
            The API error base class that provides details about an error that occurred
            while processing a service request.
            
            &lt;p&gt;The OGNL field path is provided for parsers to identify the request data
            element that may have caused the error.&lt;/p&gt;
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="fieldPath" type="xsd:string">
            <annotation>
              <documentation>
                The OGNL field path to identify cause of error.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="fieldPathElements" type="tns:FieldPathElement">
            <annotation>
              <documentation>
                A parsed copy of the field path. For example, the field path "operations[1].operand"
                corresponds to this list: {FieldPathElement(field = "operations", index = 1),
                FieldPathElement(field = "operand", index = null)}.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="trigger" type="xsd:string">
            <annotation>
              <documentation>
                The data that caused the error.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="errorString" type="xsd:string">
            <annotation>
              <documentation>
                A simple string representation of the error and reason.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="ApiException">
        <annotation>
          <documentation>
            Exception class for holding a list of service errors.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApplicationException">
            <sequence>
              <element maxOccurs="unbounded" minOccurs="0" name="errors" type="tns:ApiError">
                <annotation>
                  <documentation>
                    List of errors.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ApiVersionError">
        <annotation>
          <documentation>
            Errors related to the usage of API versions.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ApiVersionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ApplicationException">
        <annotation>
          <documentation>
            Base class for exceptions.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="message" type="xsd:string">
            <annotation>
              <documentation>
                Error message.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="ArchiveLiveStreamEvents">
        <annotation>
          <documentation>
            The action used for archiving {@link LiveStreamEvent} objects.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:LiveStreamEventAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ArchiveSlates">
        <annotation>
          <documentation>
            The action used for archiving slates.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:SlateAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="AuthenticationError">
        <annotation>
          <documentation>
            An error for an exception that occurred when authenticating.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:AuthenticationError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="BooleanValue">
        <annotation>
          <documentation>
            Contains a boolean value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:boolean">
                <annotation>
                  <documentation>
                    The boolean value.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CollectionSizeError">
        <annotation>
          <documentation>
            Error for the size of the collection being too large
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:CollectionSizeError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CommonError">
        <annotation>
          <documentation>
            A place for common errors that can be used across services.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:CommonError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="Date">
        <annotation>
          <documentation>
            Represents a date.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="year" type="xsd:int">
            <annotation>
              <documentation>
                Year (e.g., 2009)
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="month" type="xsd:int">
            <annotation>
              <documentation>
                Month (1..12)
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="day" type="xsd:int">
            <annotation>
              <documentation>
                Day (1..31)
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="DateTime">
        <annotation>
          <documentation>
            Represents a date combined with the time of day.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="date" type="tns:Date"/>
          <element maxOccurs="1" minOccurs="0" name="hour" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="minute" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="second" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="timeZoneId" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="DateTimeValue">
        <annotation>
          <documentation>
            Contains a date-time value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="tns:DateTime">
                <annotation>
                  <documentation>
                    The {@code DateTime} value.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DateValue">
        <annotation>
          <documentation>
            Contains a date value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="tns:Date">
                <annotation>
                  <documentation>
                    The {@code Date} value.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="EntityLimitReachedError">
        <annotation>
          <documentation>
            An error that occurs when creating an entity if the limit on the number of allowed entities for
            a network has already been reached.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:EntityLimitReachedError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FeatureError">
        <annotation>
          <documentation>
            Errors related to feature management.  If you attempt using a feature that is not available to
            the current network you'll receive a FeatureError with the missing feature as the trigger.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:FeatureError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FieldPathElement">
        <annotation>
          <documentation>
            A segment of a field path. Each dot in a field path defines a new segment.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="field" type="xsd:string">
            <annotation>
              <documentation>
                The name of a field in lower camelcase. (e.g. "biddingStrategy")
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="index" type="xsd:int">
            <annotation>
              <documentation>
                For list fields, this is a 0-indexed position in the list. Null for non-list fields.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="HlsSettings">
        <annotation>
          <documentation>
            {@link LiveStream} settings that are specific to the HTTP live streaming (HLS) protocol.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="playlistType" type="tns:PlaylistType">
            <annotation>
              <documentation>
                Indicates the type of the playlist associated with this live stream. The playlist type is
                analogous to the EXT-X-PLAYLIST-TYPE HLS tag. This field is optional and will default to {@link
                PlaylistType#LIVE}. This field cannot be modified after live stream creation.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="masterPlaylistSettings" type="tns:MasterPlaylistSettings">
            <annotation>
              <documentation>
                The settings for the master playlist. This field is optional and if it is not set will default
                to a {@link MasterPlaylistSettings} with a refresh type of {@link RefreshType#AUTOMATIC}.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="InternalApiError">
        <annotation>
          <documentation>
            Indicates that a server-side error has occured. {@code InternalApiError}s
            are generally not the result of an invalid request or message sent by the
            client.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:InternalApiError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="InvalidUrlError">
        <annotation>
          <documentation>
            Lists all errors associated with URLs.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:InvalidUrlError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType abstract="true" name="LiveStreamEventAction">
        <annotation>
          <documentation>
            Represents the actions that can be performed on {@link LiveStreamEvent}
            objects.
          </documentation>
        </annotation>
        <sequence/>
      </complexType>
      <complexType name="LiveStreamEventActionError">
        <annotation>
          <documentation>
            Lists all errors associated with live stream event action.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:LiveStreamEventActionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LiveStreamEventCdnSettingsError">
        <annotation>
          <documentation>
            Lists all errors associated with {@link LiveStreamEvent} CDN configurations.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:LiveStreamEventCdnSettingsError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LiveStreamEventCustomAssetKeyError">
        <annotation>
          <documentation>
            Lists all errors associated with live stream event custom asset keys.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:LiveStreamEventCustomAssetKeyError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LiveStreamEventDateTimeError">
        <annotation>
          <documentation>
            Lists all errors associated with live stream event start and end date times.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:LiveStreamEventDateTimeError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LiveStreamEvent">
        <annotation>
          <documentation>
            A {@code LiveStreamEvent} encapsulates all the information necessary to enable DAI (Dynamic Ad
            Insertion) into a live video stream.
            
            &lt;p&gt;This includes information such as the start and expected end time of the live stream, the URL
            of the actual content for Ad Manager to pull and insert ads into, as well as the metadata
            necessary to generate ad requests during the live stream.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="id" type="xsd:long">
            <annotation>
              <documentation>
                The unique ID of the {@code LiveStreamEvent}. This value is read-only and
                is assigned by Google.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="name" type="xsd:string">
            <annotation>
              <documentation>
                The name of the {@code LiveStreamEvent}. This value is required to create
                a live stream event and has a maximum length of 255 characters.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="status" type="tns:LiveStreamEventStatus">
            <annotation>
              <documentation>
                The status of this {@code LiveStreamEvent}. This attribute is read-only
                and is assigned by Google. Live stream events are created in the
                {@link LiveStreamEventStatus#PAUSED} state.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="creationDateTime" type="tns:DateTime">
            <annotation>
              <documentation>
                The date and time this {@code LiveStreamEvent} was created. This attribute
                is read-only.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="lastModifiedDateTime" type="tns:DateTime">
            <annotation>
              <documentation>
                The date and time this {@code LiveStreamEvent} was last modified. This
                attribute is read-only.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="startDateTime" type="tns:DateTime">
            <annotation>
              <documentation>
                The start date and time of this {@code LiveStreamEvent}. This attribute is required if the
                {@link LiveStreamEvent#startDateTimeType} is {@link StartDateTimeType#USE_START_DATE_TIME} and
                is ignored for all other values of {@link StartDateTimeType}. Modifying this attribute for an
                active live stream can impact traffic.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="startDateTimeType" type="tns:StartDateTimeType">
            <annotation>
              <documentation>
                Specifies whether to start the {@link LiveStreamEvent} right away, in an hour, etc.
                This attribute is optional and defaults to {@link StartDateTimeType#USE_START_DATE_TIME}.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="endDateTime" type="tns:DateTime">
            <annotation>
              <documentation>
                The scheduled end date and time of this {@code LiveStreamEvent}. This attribute is required if
                {@code unlimitedEndDateTime} is false and ignored if {@code unlimitedEndDateTime} is true.
                Modifying this attribute for an active live stream can impact traffic.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="unlimitedEndDateTime" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether the {@link LiveStreamEvent} has an end time. This attribute is optional and defaults
                to false. If this field is true, {@code endDateTime} is ignored.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="totalEstimatedConcurrentUsers" type="xsd:long">
            <annotation>
              <documentation>
                The total number of concurrent users expected to watch this live stream across all regions.
                This attribute is optional and default value is 0.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="contentUrls" type="xsd:string">
            <annotation>
              <documentation>
                The list of URLs pointing to the live stream content in Content Delivery Network. This
                attribute is required and can be modified when the live stream is in a {@link
                LiveStreamEventStatus#PAUSED} state.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0" name="adTags" type="xsd:string">
            <annotation>
              <documentation>
                The list of Ad Manager ad tag URLs generated by the Ad Manager trafficking workflow that are
                associated with this live stream event. Currently, the list includes only one element: the
                master ad tag. This attribute is required.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="assetKey" type="xsd:string">
            <annotation>
              <documentation>
                This code is used in constructing a live stream event master playlist URL. This attribute is
                read-only and is assigned by Google. {@code liveStreamEventCode} was
                renamed {@code assetKey} in v201911.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="slateCreativeId" type="xsd:long">
            <annotation>
              <documentation>
                ID corresponding to the slate for this live event. If not set, network default value
                will be used.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="dvrWindowSeconds" type="xsd:int">
            <annotation>
              <documentation>
                Length of the DVR window in seconds. This value is optional. If unset the default window as
                provided by the input encoder will be used. Modifying this value for an active live stream can
                impact traffic.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="enableDaiAuthenticationKeys" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether the live stream's requests to the IMA SDK API will be authenticated using the DAI
                authentication keys.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="adBreakFillType" type="tns:AdBreakFillType">
            <annotation>
              <documentation>
                The type of content that should be used to fill an empty ad break. This value is optional and
                defaults to {@link AdBreakFillType#SLATE}.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="underfillAdBreakFillType" type="tns:AdBreakFillType">
            <annotation>
              <documentation>
                The type of content that should be used to fill the time remaining in the ad break when there
                are not enough ads to fill the entire break. This value is optional and defaults to {@link
                AdBreakFillType#SLATE}. To set this field a network needs to have the "Live stream ad break
                underfill type" feature enabled.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="adHolidayDuration" type="xsd:long">
            <annotation>
              <documentation>
                The duration (in seconds), starting from the time the user enters the DAI stream, for which
                mid-roll decisioning will be skipped. This field is only applicable when an ad holiday
                is requested in the stream create request. This value is optional and defaults to 0.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="enableMaxFillerDuration" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether there will be max filler duration in this live stream. If true, {@code
                maxFillerDuration} should be specified. This field is optional and defaults to false.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="maxFillerDuration" type="xsd:long">
            <annotation>
              <documentation>
                The maximum number of seconds that can be used to fill this ad pod, either with a slate or
                underlying content, depending on your settings. If more time needs to be filled, the ad pod
                will instead be dropped and the underlying content will be served.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="enableDurationlessAdBreaks" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether there will be durationless ad breaks in this live stream. If true,
                {@code defaultAdBreakDuration} should be specified. This field is optional and defaults to
                false;
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="defaultAdBreakDuration" type="xsd:long">
            <annotation>
              <documentation>
                The default ad pod duration (in seconds) that will be requested when an ad break cue-out
                does not specify a duration. This field is optional and defaults to 0;
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="streamCreateDaiAuthenticationKeyIds" type="xsd:long">
            <annotation>
              <documentation>
                The list of {@link DaiAuthenticationKey} IDs used to authenticate stream create requests for
                this live stream. Modifying keys for an active live stream may break the stream for some users.
                Exercise caution.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="sourceContentConfigurationIds" type="xsd:long">
            <annotation>
              <documentation>
                The list of {@link CdnConfiguration} IDs that provide settings for ingesting and delivering the
                videos associated with this source. Modifying settings for an active live stream may break the
                stream for some users. Exercise caution.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="hlsSettings" type="tns:HlsSettings">
            <annotation>
              <documentation>
                The settings that are specific to HTTPS live streaming (HLS) protocol. This field is optional
                and if it is not set will use the default HLS settings.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="enableAllowlistedIps" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether specific allowlisted IP addresses should be used to access this live stream. This field
                is optional and will default to false. To set this field a network needs to have the "Video
                live allowlisted IPS enabled" feature enabled. Modifying this field for an active live stream
                can impact traffic.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="dynamicAdInsertionType" type="tns:DynamicAdInsertionType">
            <annotation>
              <documentation>
                The method of dynamic ad insertion that is used to insert ads into this live stream. This
                attribute is optional and defaults to {@link DynamicAdInsertionType.LINEAR}. This field cannot
                be modified after live stream creation.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="enableRelativePlaylistDelivery" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether the served playlists can include relative URLs. This field is optional and defaults to
                false. To set this field a network needs to have the "Video live stream relative playlist URLs"
                feature enabled. This field can be modified when the live stream is in a {@link
                LiveStreamEventStatus#PAUSED} state.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="streamingFormat" type="tns:StreamingFormat">
            <annotation>
              <documentation>
                The streaming format of the {@link LiveStreamEvent} media. This field cannot be modified after
                live stream creation.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="prefetchEnabled" type="xsd:boolean">
            <annotation>
              <documentation>
                Indicates whether the option to prefetch ad requests is enabled.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="prefetchSettings" type="tns:PrefetchSettings">
            <annotation>
              <documentation>
                The information needed to prefetch ad requests for an ad break.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="enableForceCloseAdBreaks" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether live stream placement opportunities without #EXT-CUE-IN markers should be force closed.
                This field is optional and defaults to false. To set this field a network needs to have the
                "Video live stream forced cue in" feature enabled.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="enableShortSegmentDropping" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether segments shorter than 1 second at the end of an ad pod should be dropped. This field is
                optional and defaults to false. To set this field a network needs to have the "Video live
                stream short segment dropping" feature enabled.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="customAssetKey" type="xsd:string">
            <annotation>
              <documentation>
                An additional code that can be used in constructing live stream event URLs. This field is
                immutable after creation and can only be set for pod serving live streams. The custom asset key
                may be at most 64 characters and can contain alphanumeric characters and symbols other than the
                following: ", ', =, !, +, #, *, ~, ;, ^, (, ), &lt;, &gt;, [, ], the white space character.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="daiEncodingProfileIds" type="xsd:long">
            <annotation>
              <documentation>
                The list of {@code DaiEncodingProfile} IDs that will be used for this live stream event. This
                field only applies to pod serving events. New profile IDs can be added to running live streams.
                Profile IDs cannot be removed from running live streams. Modifying settings for an active live
                stream may break the stream for some users. Exercise caution.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="segmentUrlAuthenticationKeyIds" type="xsd:long">
            <annotation>
              <documentation>
                The list of {@link DaiAuthenticationKey} IDs used to authenticate ad segment url requests for
                this live stream. This field only applies to pod serving events. Modifying settings for an
                active live stream may break the stream for some users. Exercise caution.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="adBreakMarkups" type="tns:AdBreakMarkupType">
            <annotation>
              <documentation>
                The formats that will be recognized as ad break start/end markers.
                This field is ignored if {@code adBreakMarkupTypesEnabled} is false
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="adBreakMarkupTypesEnabled" type="xsd:boolean">
            <annotation>
              <documentation>
                Whether this {@link LiveStreamEvent} is specifying a subset of supported
                {@code adBreakMarkups}. If this field is false, all supported formats will be treated as ad
                break start/end markers.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="adServingFormat" type="tns:AdServingFormat">
            <annotation>
              <documentation>
                Whether ads on this {@link LiveStreamEvent} are served by Google Ad Manager DAI or Google Ad
                Serving.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="LiveStreamEventDvrWindowError">
        <annotation>
          <documentation>
            Lists the errors associated with setting the {@link LiveStreamEvent} DVR window duration.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:LiveStreamEventDvrWindowError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LiveStreamEventPage">
        <annotation>
          <documentation>
            Captures a page of {@link LiveStreamEvent} objects.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="totalResultSetSize" type="xsd:int">
            <annotation>
              <documentation>
                The size of the total result set to which this page belongs.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="startIndex" type="xsd:int">
            <annotation>
              <documentation>
                The absolute index in the total result set on which this page begins.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0" name="results" type="tns:LiveStreamEvent">
            <annotation>
              <documentation>
                The collection of live stream events contained within this page.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="LiveStreamEventSlateError">
        <annotation>
          <documentation>
            Lists all errors associated with {@link LiveStreamEvent} slate creative id.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:LiveStreamEventSlateError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="MasterPlaylistSettings">
        <annotation>
          <documentation>
            Settings for the HLS (HTTP Live Streaming) master playlist.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="refreshType" type="tns:RefreshType">
            <annotation>
              <documentation>
                Indicates how the master playlist gets refreshed. This field is optional and defaults to {@link
                RefreshType#AUTOMATIC}. This field can only be modified when the live stream is in a {@link
                LiveStreamEventStatus#PAUSED} state.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="NotNullError">
        <annotation>
          <documentation>
            Caused by supplying a null value for an attribute that cannot be null.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:NotNullError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NullError">
        <annotation>
          <documentation>
            Errors associated with violation of a NOT NULL check.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:NullError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NumberValue">
        <annotation>
          <documentation>
            Contains a numeric value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
                <annotation>
                  <documentation>
                    The numeric value represented as a string.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ParseError">
        <annotation>
          <documentation>
            Lists errors related to parsing.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ParseError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PauseLiveStreamEventAds">
        <annotation>
          <documentation>
            The action used for pausing ads for {@link LiveStreamEvent} objects.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:LiveStreamEventAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PauseLiveStreamEvents">
        <annotation>
          <documentation>
            The action used for pausing {@link LiveStreamEvent} objects.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:LiveStreamEventAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PermissionError">
        <annotation>
          <documentation>
            Errors related to incorrect permission.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PermissionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PrefetchSettings">
        <annotation>
          <documentation>
            The information needed to prefetch ad requests for an ad break.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0"
            name="initialAdRequestDurationSeconds" type="xsd:int">
            <annotation>
              <documentation>
                The duration of the part of the break to be prefetched.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="PublisherQueryLanguageContextError">
        <annotation>
          <documentation>
            An error that occurs while executing a PQL query contained in
            a {@link Statement} object.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PublisherQueryLanguageContextError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PublisherQueryLanguageSyntaxError">
        <annotation>
          <documentation>
            An error that occurs while parsing a PQL query contained in a
            {@link Statement} object.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PublisherQueryLanguageSyntaxError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="QuotaError">
        <annotation>
          <documentation>
            Describes a client-side error on which a user is attempting
            to perform an action to which they have no quota remaining.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:QuotaError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RangeError">
        <annotation>
          <documentation>
            A list of all errors associated with the Range constraint.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:RangeError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RefreshLiveStreamEventMasterPlaylists">
        <annotation>
          <documentation>
            The action used for refreshing the master playlists of {@link LiveStreamEvent} objects.
            
            &lt;p&gt;This action will only get applied to live streams with a refresh type of {@link
            RefreshType#MANUAL}.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:LiveStreamEventAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RequiredCollectionError">
        <annotation>
          <documentation>
            A list of all errors to be used for validating sizes of collections.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:RequiredCollectionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RequiredError">
        <annotation>
          <documentation>
            Errors due to missing required field.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:RequiredError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ServerError">
        <annotation>
          <documentation>
            Errors related to the server.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ServerError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SetValue">
        <annotation>
          <documentation>
            Contains a set of {@link Value Values}. May not contain duplicates.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="unbounded" minOccurs="0" name="values" type="tns:Value">
                <annotation>
                  <documentation>
                    The values. They must all be the same type of {@code Value} and not contain duplicates.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType abstract="true" name="SlateAction">
        <annotation>
          <documentation>
            Represents the actions that can be performed on slates.
          </documentation>
        </annotation>
        <sequence/>
      </complexType>
      <complexType name="Slate">
        <annotation>
          <documentation>
            A {@code Slate} encapsulates all the information necessary to represent a Slate entity, the video
            creative used by Dynamic Ad Insertion to fill vacant ad slots.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="id" type="xsd:long">
            <annotation>
              <documentation>
                The unique ID of the {@code Slate}. This value is read-only and is assigned by Google.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="name" type="xsd:string">
            <annotation>
              <documentation>
                The name of the {@code Slate}. This value is required to create a slate and has a maximum
                length of 255 characters.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="status" type="tns:SlateStatus">
            <annotation>
              <documentation>
                The status of this {@code Slate}. This attribute is read-only and is assigned by Google. Slates
                are created in the {@link SlateStatus#ACTIVE} state.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="transcodeStatus" type="tns:TranscodeStatus">
            <annotation>
              <documentation>
                Server side transcoding status of the current slate.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="videoSourceUrl" type="xsd:string">
            <annotation>
              <documentation>
                The location of the original asset if publisher provided and slate is externally hosted.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="lastModifiedDateTime" type="tns:DateTime">
            <annotation>
              <documentation>
                The date and time this slate was last modified.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="SlatePage">
        <annotation>
          <documentation>
            Captures a page of {@link Slate} objects.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="totalResultSetSize" type="xsd:int">
            <annotation>
              <documentation>
                The size of the total result set to which this page belongs.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="startIndex" type="xsd:int">
            <annotation>
              <documentation>
                The absolute index in the total result set on which this page begins.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0" name="results" type="tns:Slate">
            <annotation>
              <documentation>
                The collection of live stream events contained within this page.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="SoapRequestHeader">
        <annotation>
          <documentation>
            Represents the SOAP request header used by API requests.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="networkCode" type="xsd:string">
            <annotation>
              <documentation>
                The network code to use in the context of a request.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="applicationName" type="xsd:string">
            <annotation>
              <documentation>
                The name of client library application.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="SoapResponseHeader">
        <annotation>
          <documentation>
            Represents the SOAP request header used by API responses.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="requestId" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="responseTime" type="xsd:long"/>
        </sequence>
      </complexType>
      <complexType name="Statement">
        <annotation>
          <documentation>
            Captures the {@code WHERE}, {@code ORDER BY} and {@code LIMIT} clauses of a
            PQL query. Statements are typically used to retrieve objects of a predefined
            domain type, which makes SELECT clause unnecessary.
            &lt;p&gt;
            An example query text might be {@code "WHERE status = 'ACTIVE' ORDER BY id
            LIMIT 30"}.
            &lt;/p&gt;
            &lt;p&gt;
            Statements support bind variables. These are substitutes for literals
            and can be thought of as input parameters to a PQL query.
            &lt;/p&gt;
            &lt;p&gt;
            An example of such a query might be {@code "WHERE id = :idValue"}.
            &lt;/p&gt;
            &lt;p&gt;
            Statements also support use of the LIKE keyword. This provides wildcard string matching.
            &lt;/p&gt;
            &lt;p&gt;
            An example of such a query might be {@code "WHERE name LIKE '%searchString%'"}.
            &lt;/p&gt;
            The value for the variable idValue must then be set with an object of type
            {@link Value}, e.g., {@link NumberValue}, {@link TextValue} or
            {@link BooleanValue}.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="query" type="xsd:string">
            <annotation>
              <documentation>
                Holds the query in PQL syntax. The syntax is:&lt;br&gt;
                &lt;code&gt;[WHERE &lt;condition&gt; {[AND | OR] &lt;condition&gt; ...}]&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;[ORDER BY &lt;property&gt; [ASC | DESC]]&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;[LIMIT {[&lt;offset&gt;,] &lt;count&gt;} | {&lt;count&gt; OFFSET &lt;offset&gt;}]&lt;/code&gt;&lt;br&gt;
                &lt;p&gt;
                &lt;code&gt;&lt;condition&gt;&lt;/code&gt;&lt;br&gt;
                &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                &lt;code&gt;:= &lt;property&gt; {&lt; | &lt;= | &gt; | &gt;= | = | != } &lt;value&gt;&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;condition&gt;&lt;/code&gt;&lt;br&gt;
                &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                &lt;code&gt;:= &lt;property&gt; {&lt; | &lt;= | &gt; | &gt;= | = | != } &lt;bind variable&gt;&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;condition&gt; := &lt;property&gt; IN &lt;list&gt;&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;condition&gt; := &lt;property&gt; IS NULL&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;condition&gt; := &lt;property&gt; LIKE &lt;wildcard%match&gt;&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;bind variable&gt; := :&lt;name&gt;&lt;/code&gt;&lt;br&gt;
                &lt;/p&gt;
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0" name="values" type="tns:String_ValueMapEntry">
            <annotation>
              <documentation>
                Holds keys and values for bind variables and their values. The key is the
                name of the bind variable. The value is the literal value of the variable.
                &lt;p&gt;
                In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
                the bind variable, represented by {@code :bindStatus} is named {@code
                bindStatus}, which would also be the parameter map key. The bind variable's
                value would be represented by a parameter map value of type
                {@link TextValue}. The final result, for example, would be an entry of
                {@code "bindStatus" =&gt; StringParam("ACTIVE")}.
                &lt;/p&gt;
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="StatementError">
        <annotation>
          <documentation>
            An error that occurs while parsing {@link Statement} objects.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StatementError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="StringFormatError">
        <annotation>
          <documentation>
            A list of error code for reporting invalid content of input strings.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StringFormatError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="StringLengthError">
        <annotation>
          <documentation>
            Errors for Strings which do not meet given length constraints.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StringLengthError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="String_ValueMapEntry">
        <annotation>
          <documentation>
            This represents an entry in a map with a key of type String
            and value of type Value.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="key" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="value" type="tns:Value"/>
        </sequence>
      </complexType>
      <complexType name="TextValue">
        <annotation>
          <documentation>
            Contains a string value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
                <annotation>
                  <documentation>
                    The string value.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="UnarchiveSlates">
        <annotation>
          <documentation>
            The action used for unarchiving slates.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:SlateAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="UniqueError">
        <annotation>
          <documentation>
            An error for a field which must satisfy a uniqueness constraint
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="UpdateResult">
        <annotation>
          <documentation>
            Represents the result of performing an action on objects.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="numChanges" type="xsd:int">
            <annotation>
              <documentation>
                The number of objects that were changed as a result of performing the
                action.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType abstract="true" name="Value">
        <annotation>
          <documentation>
            {@code Value} represents a value.
          </documentation>
        </annotation>
        <sequence/>
      </complexType>
      <complexType name="VideoAdTagError">
        <annotation>
          <documentation>
            Lists all errors associated with live stream event ad tags.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:VideoAdTagError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <simpleType name="AdBreakFillType">
        <annotation>
          <documentation>
            Describes what should be used to fill an empty ad break during a live stream.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="SLATE">
            <annotation>
              <documentation>
                Ad break should be filled with slate.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNDERLYING_CONTENT">
            <annotation>
              <documentation>
                Ad break should be filled with underlying content.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API
                version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="AdBreakMarkupError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="INVALID_AD_BREAK_MARKUPS_FOR_STREAMING_FORMAT">
            <annotation>
              <documentation>
                The ad break markups provided are not valid for the Streaming Format
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="AdBreakMarkupType">
        <annotation>
          <documentation>
            Describes the SCTE ad break markups for a {@link LiveStreamEvent}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="AD_BREAK_MARKUP_HLS_EXT_CUE">
            <annotation>
              <documentation>
                The CUE-OUT/CUE-IN ad break marker type.
                This mark up type is only applicable for HLS live streams.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AD_BREAK_MARKUP_HLS_PRIMETIME_SPLICE">
            <annotation>
              <documentation>
                The CUE (Adobe/Azure Prime Time) ad break marker type.
                This mark up type is only applicable for HLS live streams.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AD_BREAK_MARKUP_HLS_DATERANGE_SPLICE">
            <annotation>
              <documentation>
                The DATERANGE (Anvato) ad break marker type.
                This mark up type is only applicable for HLS live streams.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AD_BREAK_MARKUP_SCTE35_XML_SPLICE_INSERT">
            <annotation>
              <documentation>
                The SCTE35 XML Splice In/Out ad break marker type.
                This markup type is only applicable for DASH live streams.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AD_BREAK_MARKUP_SCTE35_BINARY_SPLICE_INSERT">
            <annotation>
              <documentation>
                The SCTE35 Binary Splice Insert ad break marker type.
                This mark up type is only applicable for HLS and DASH live streams.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AD_BREAK_MARKUP_SCTE35_BINARY_PROVIDER_AD_START_END">
            <annotation>
              <documentation>
                The SCTE35 Binary Time Signal: Provider Ad Start/End ad break marker type.
                This mark up type is only applicable for HLS and DASH live streams.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AD_BREAK_MARKUP_SCTE35_BINARY_PROVIDER_PLACEMENT_OP_START_END">
            <annotation>
              <documentation>
                The SCTE35 Binary Time Signal: Provider Placement Opportunity  Start/End ad break marker type.
                This mark up type is only applicable for HLS and DASH live streams.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API
                version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="AdServingFormat">
        <annotation>
          <documentation>
            Indicates how the ads of the live stream should be served.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="AD_MANAGER_DAI">
            <annotation>
              <documentation>
                The ads are served through Google Ad Manager DAI.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DIRECT">
            <annotation>
              <documentation>
                The ads are served through Google Ad Manager Ad Serving.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="ApiVersionError.Reason">
        <restriction base="xsd:string">
          <enumeration value="UPDATE_TO_NEWER_VERSION">
            <annotation>
              <documentation>
                Indicates that the operation is not allowed in the version the request
                was made in.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="AuthenticationError.Reason">
        <restriction base="xsd:string">
          <enumeration value="AMBIGUOUS_SOAP_REQUEST_HEADER">
            <annotation>
              <documentation>
                The SOAP message contains a request header with an ambiguous definition of the authentication
                header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
                both null or both were specified. Exactly one value should be specified with each request.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_EMAIL">
            <annotation>
              <documentation>
                The login provided is invalid.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AUTHENTICATION_FAILED">
            <annotation>
              <documentation>
                Tried to authenticate with provided information, but failed.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_OAUTH_SIGNATURE">
            <annotation>
              <documentation>
                The OAuth provided is invalid.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_SERVICE">
            <annotation>
              <documentation>
                The specified service to use was not recognized.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MISSING_SOAP_REQUEST_HEADER">
            <annotation>
              <documentation>
                The SOAP message is missing a request header with an {@code authToken} and optional {@code
                networkCode}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MISSING_AUTHENTICATION_HTTP_HEADER">
            <annotation>
              <documentation>
                The HTTP request is missing a request header with an {@code authToken}
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MISSING_AUTHENTICATION">
            <annotation>
              <documentation>
                The request is missing an {@code authToken}
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NETWORK_API_ACCESS_DISABLED">
            <annotation>
              <documentation>
                The network does not have API access enabled.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NO_NETWORKS_TO_ACCESS">
            <annotation>
              <documentation>
                The user is not associated with any network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NETWORK_NOT_FOUND">
            <annotation>
              <documentation>
                No network for the given {@code networkCode} was found.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NETWORK_CODE_REQUIRED">
            <annotation>
              <documentation>
                The user has access to more than one network, but did not provide a {@code networkCode}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CONNECTION_ERROR">
            <annotation>
              <documentation>
                An error happened on the server side during connection to authentication service.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK">
            <annotation>
              <documentation>
                The user tried to create a test network using an account that already is associated with a
                network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNDER_INVESTIGATION">
            <annotation>
              <documentation>
                The account is blocked and under investigation by the collections team. Please contact Google
                for more information.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="CollectionSizeError.Reason">
        <restriction base="xsd:string">
          <enumeration value="TOO_LARGE"/>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="CommonError.Reason">
        <annotation>
          <documentation>
            Describes reasons for common errors
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="NOT_FOUND">
            <annotation>
              <documentation>
                Indicates that an attempt was made to retrieve an entity that does not
                exist.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ALREADY_EXISTS">
            <annotation>
              <documentation>
                Indicates that an attempt was made to create an entity that already
                exists.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NOT_APPLICABLE">
            <annotation>
              <documentation>
                Indicates that a value is not applicable for given use case.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DUPLICATE_OBJECT">
            <annotation>
              <documentation>
                Indicates that two elements in the collection were identical.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_UPDATE">
            <annotation>
              <documentation>
                Indicates that an attempt was made to change an immutable field.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNSUPPORTED_OPERATION">
            <annotation>
              <documentation>
                Indicates that the requested operation is not supported.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CONCURRENT_MODIFICATION">
            <annotation>
              <documentation>
                Indicates that another request attempted to update the same data in the same network
                at about the same time. Please wait and try the request again.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="DynamicAdInsertionType">
        <annotation>
          <documentation>
            Describes how the live stream will have ads dynamically inserted into playlists.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="LINEAR">
            <annotation>
              <documentation>
                Content manifest is served by Google DAI. Content and ads are stitched together into a unique
                video manifest per user.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="POD_SERVING_REDIRECT">
            <annotation>
              <documentation>
                Content manifest is served by the partner, embedding Google DAI ad segment URLs which redirect
                to unique Google DAI ad segments per user.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="POD_SERVING_MANIFEST">
            <annotation>
              <documentation>
                Ads manifest is served by Google DAI, containing unique ad pod segments for the video player
                to switch to from the content stream, or for the partner to stitch directly into the user
                content manifest.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="EntityLimitReachedError.Reason">
        <annotation>
          <documentation>
            The reasons for the entity limit reached error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="CUSTOM_TARGETING_VALUES_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of custom targeting values exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AD_EXCLUSION_RULES_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of ad exclusion rules exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="FIRST_PARTY_AUDIENCE_SEGMENTS_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of first party audience segments exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="PLACEMENTS_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of active placements exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="LINE_ITEMS_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of line items excceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ACTIVE_LINE_ITEMS_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of active line items exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DAI_ENCODING_PROFILES_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of not-archived encoding profiles exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="TRAFFIC_FORECAST_SEGMENTS_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of traffic forecast segments exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="FORECAST_ADJUSTMENTS_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of forecast adjustments exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ACTIVE_EXPERIMENTS_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of active experiments exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="SITES_LIMIT_REACHED">
            <annotation>
              <documentation>
                The number of sites exceeds the max number allowed in the network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="FeatureError.Reason">
        <restriction base="xsd:string">
          <enumeration value="MISSING_FEATURE">
            <annotation>
              <documentation>
                A feature is being used that is not enabled on the current network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="InternalApiError.Reason">
        <annotation>
          <documentation>
            The single reason for the internal API error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNEXPECTED_INTERNAL_API_ERROR">
            <annotation>
              <documentation>
                API encountered an unexpected internal error.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="TRANSIENT_ERROR">
            <annotation>
              <documentation>
                A temporary error occurred during the request. Please retry.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The cause of the error is not known or only defined in newer versions.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DOWNTIME">
            <annotation>
              <documentation>
                The API is currently unavailable for a planned downtime.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ERROR_GENERATING_RESPONSE">
            <annotation>
              <documentation>
                Mutate succeeded but server was unable to build response. Client should not retry mutate.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="InvalidUrlError.Reason">
        <restriction base="xsd:string">
          <enumeration value="ILLEGAL_CHARACTERS">
            <annotation>
              <documentation>
                The URL contains invalid characters.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_FORMAT">
            <annotation>
              <documentation>
                The format of the URL is not allowed. This could occur for a number of
                reasons. For example, if an invalid scheme is specified (like "ftp://")
                or if a port is specified when not required, or if a query was specified
                when not required.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INSECURE_SCHEME">
            <annotation>
              <documentation>
                URL contains insecure scheme.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NO_SCHEME">
            <annotation>
              <documentation>
                The URL does not contain a scheme.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="LiveStreamEventActionError.Reason">
        <annotation>
          <documentation>
            Describes reasons for {@code LiveStreamEventActionError}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="INVALID_STATUS_TRANSITION">
            <annotation>
              <documentation>
                The operation is not applicable to the current status.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="IS_ARCHIVED">
            <annotation>
              <documentation>
                The operation cannot be applied because the live stream event is
                archived.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_SLATE_SETTING">
            <annotation>
              <documentation>
                Both the live stream event slate and the network default slate are not set.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="SLATE_CREATIVE_NOT_TRANSCODED">
            <annotation>
              <documentation>
                The slate creative has not been transcoded.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="SLATE_CREATIVE_ARCHIVED">
            <annotation>
              <documentation>
                Unable to activate live stream event that has an associated archived slate.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_ACTIVATE_IF_USING_INACTIVE_DAI_AUTHENTICATION_KEYS">
            <annotation>
              <documentation>
                A live stream cannot be activated if it is using inactive DAI authentication keys.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested
                API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="LiveStreamEventCdnSettingsError.Reason">
        <annotation>
          <documentation>
            Describes reasons for {@code LiveStreamEventCdnSettingsError}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="CDN_CONFIGURATIONS_MUST_HAVE_UNIQUE_CDN_URL_PREFIXES">
            <annotation>
              <documentation>
                CDN configurations in a single {@link LiveStreamEvent} cannot have duplicate URL prefixes.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MUST_BE_LIVE_CDN_CONFIGURATION">
            <annotation>
              <documentation>
                Only CDN configurations of type {@code VodConfigurationType.LINEAR_SOURCE_CONTENT} can be
                listed in {@link LiveStreamEvent#sourceContentConfigurations}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="LiveStreamEventCustomAssetKeyError.Reason">
        <annotation>
          <documentation>
            Describes reasons for {@code LiveStreamEventCustomAssetKeyError}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="CONTAINS_INVALID_CHARACTERS">
            <annotation>
              <documentation>
                Custom asset key contains invalid characters.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="LiveStreamEventDateTimeError.Reason">
        <annotation>
          <documentation>
            Describes reasons for {@code LiveStreamEventDateTimeError}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="START_DATE_TIME_IS_IN_PAST">
            <annotation>
              <documentation>
                Cannot create a new live stream event with a start date in the past.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="END_DATE_TIME_NOT_AFTER_START_DATE_TIME">
            <annotation>
              <documentation>
                End date must be after the start date.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="END_DATE_TIME_TOO_LATE">
            <annotation>
              <documentation>
                {@code DateTime}s after 1 January 2037 are not supported.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested
                API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="LiveStreamEventDvrWindowError.Reason">
        <annotation>
          <documentation>
            Describes reasons for {@code LiveStreamEventDvrWindowError}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="DVR_WINDOW_TOO_HIGH">
            <annotation>
              <documentation>
                The DVR window cannot be higher than the value allowed for this network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DVR_WINDOW_TOO_LOW">
            <annotation>
              <documentation>
                The DVR window cannot be lower than the minimum value allowed.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="LiveStreamEventSlateError.Reason">
        <annotation>
          <documentation>
            Describes reasons for {@code LiveStreamEventSlateError}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="INVALID_SLATE_CREATIVE_ID">
            <annotation>
              <documentation>
                The slate creative ID does not correspond to a slate creative.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="LIVE_STREAM_EVENT_SLATE_CREATIVE_ID_REQUIRED">
            <annotation>
              <documentation>
                The required field live stream event slate is not set.
                
                &lt;p&gt;There must either be a slate creative ID assigned to the live stream event or
                a valid network level slate selected.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MISSING_SOURCE_FOR_SLATE">
            <annotation>
              <documentation>
                The slate does not have a videoSourceUrl or assetSourcePath.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_SLATE_TYPE">
            <annotation>
              <documentation>
                The slate is of an invalid type.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_CHANGE_SLATE_VIDEO_SOURCE_URL">
            <annotation>
              <documentation>
                The slate video source url cannot change.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="LiveStreamEventStatus">
        <annotation>
          <documentation>
            Describes the status of a {@link LiveStreamEvent} object.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="ACTIVE">
            <annotation>
              <documentation>
                Indicates the {@link LiveStreamEvent} has been created and is eligible
                for streaming.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ARCHIVED">
            <annotation>
              <documentation>
                Indicates the {@link LiveStreamEvent} has been archived.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="PAUSED">
            <annotation>
              <documentation>
                Indicates the {@link LiveStreamEvent} has been paused. This
                can be made {@link #ACTIVE} at later time.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ADS_PAUSED">
            <annotation>
              <documentation>
                Indicates that the stream is still being served, but ad insertion should be paused
                temporarily.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API
                version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="NotNullError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="ARG1_NULL">
            <annotation>
              <documentation>
                Assuming that a method will not have more than 3 arguments, if it does,
                return NULL
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ARG2_NULL"/>
          <enumeration value="ARG3_NULL"/>
          <enumeration value="NULL"/>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="NullError.Reason">
        <annotation>
          <documentation>
            The reasons for the validation error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="NULL_CONTENT">
            <annotation>
              <documentation>
                Specified list/container must not contain any null elements
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="ParseError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNPARSABLE">
            <annotation>
              <documentation>
                Indicates an error in parsing an attribute.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="PermissionError.Reason">
        <annotation>
          <documentation>
            Describes reasons for permission errors.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="PERMISSION_DENIED">
            <annotation>
              <documentation>
                User does not have the required permission for the request.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="PlaylistType">
        <annotation>
          <documentation>
            Describes the type of the playlist associated with this live stream. This is analagous to the
            EXT-X-PLAYLIST-TYPE HLS tag. Use {@link PlaylistType.EVENT} for streams with the value
            "#EXT-X-PLAYLIST-TYPE:EVENT" and use {@link PlaylistType.LIVE} for streams without the tag.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="EVENT">
            <annotation>
              <documentation>
                The playlist is an event, which means that media segments can only be added to the end of the
                playlist. This allows viewers to scrub back to the beginning of the playlist.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="LIVE">
            <annotation>
              <documentation>
                The playlist is a live stream and there are no restrictions on whether media segments can be
                removed from the beginning of the playlist.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="PublisherQueryLanguageContextError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNEXECUTABLE">
            <annotation>
              <documentation>
                Indicates that there was an error executing the PQL.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="PublisherQueryLanguageSyntaxError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNPARSABLE">
            <annotation>
              <documentation>
                Indicates that there was a PQL syntax error.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="QuotaError.Reason">
        <restriction base="xsd:string">
          <enumeration value="EXCEEDED_QUOTA">
            <annotation>
              <documentation>
                The number of requests made per second is too high and has exceeded the
                allowable limit. The recommended approach to handle this error is to wait
                about 5 seconds and then retry the request. Note that this does not
                guarantee the request will succeed. If it fails again, try increasing the
                wait time.
                &lt;p&gt;Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
                360 accounts, or 2 per second for Ad Manager accounts. Once again
                this does not guarantee that every request will succeed, but may help
                reduce the number of times you receive this error.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="REPORT_JOB_LIMIT">
            <annotation>
              <documentation>
                This user has exceeded the allowed number of new report requests per hour
                (this includes both reports run via the UI and reports
                run via {@link ReportService#runReportJob}).
                The recommended approach to handle this error is to wait about 10 minutes
                and then retry the request. Note that this does not guarantee the request
                will succeed. If it fails again, try increasing the wait time.
                &lt;p&gt;Another way to mitigate this error is to limit the number of new report
                requests to 250 per hour per user. Once again, this does not guarantee that
                every request will succeed, but may help reduce the number of times you
                receive this error.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="RangeError.Reason">
        <restriction base="xsd:string">
          <enumeration value="TOO_HIGH"/>
          <enumeration value="TOO_LOW"/>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="RefreshType">
        <annotation>
          <documentation>
            Enumerates the different ways an HLS master playlist on a live stream will can be refreshed.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="AUTOMATIC">
            <annotation>
              <documentation>
                The master playlist will automatically be refreshed.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MANUAL">
            <annotation>
              <documentation>
                The master playlist will only be refreshed when requested.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="RequiredCollectionError.Reason">
        <restriction base="xsd:string">
          <enumeration value="REQUIRED">
            <annotation>
              <documentation>
                A required collection is missing.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="TOO_LARGE">
            <annotation>
              <documentation>
                Collection size is too large.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="TOO_SMALL">
            <annotation>
              <documentation>
                Collection size is too small.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="RequiredError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="REQUIRED">
            <annotation>
              <documentation>
                Missing required field.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="ServerError.Reason">
        <annotation>
          <documentation>
            Describes reasons for server errors
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="SERVER_ERROR">
            <annotation>
              <documentation>
                Indicates that an unexpected error occured.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="SERVER_BUSY">
            <annotation>
              <documentation>
                Indicates that the server is currently experiencing a high load. Please
                wait and try your request again.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="SlateStatus">
        <annotation>
          <documentation>
            Describes the status of a {@link Slate} object.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="ACTIVE">
            <annotation>
              <documentation>
                Indicates the {@link Slate} has been created and is eligible for streaming.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ARCHIVED">
            <annotation>
              <documentation>
                Indicates the {@link Slate} has been archived.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="StartDateTimeType">
        <annotation>
          <documentation>
            Specifies the start type to use for an entity with a start date time field.
            For example, a {@link LineItem} or {@link LineItemCreativeAssociation}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="USE_START_DATE_TIME">
            <annotation>
              <documentation>
                Use the value in {@link #startDateTime}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="IMMEDIATELY">
            <annotation>
              <documentation>
                The entity will start serving immediately. {@link #startDateTime} in the
                request is ignored and will be set to the current time. Additionally,
                {@link #startDateTimeType} will be set to
                {@link StartDateTimeType#USE_START_DATE_TIME}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ONE_HOUR_FROM_NOW">
            <annotation>
              <documentation>
                The entity will start serving one hour from now. {@link #startDateTime}
                in the request is ignored and will be set to one hour from the current
                time. Additionally, {@link #startDateTimeType} will be set to
                {@link StartDateTimeType#USE_START_DATE_TIME}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="StatementError.Reason">
        <restriction base="xsd:string">
          <enumeration value="VARIABLE_NOT_BOUND_TO_VALUE">
            <annotation>
              <documentation>
                A bind variable has not been bound to a value.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="StreamingFormat">
        <annotation>
          <documentation>
            The {@link LiveStreamEvent} streaming format.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="HLS">
            <annotation>
              <documentation>
                The format of the live stream media is HTTP Live Streaming.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DASH">
            <annotation>
              <documentation>
                The format of the live stream media is MPEG-DASH.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="StringFormatError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNKNOWN"/>
          <enumeration value="ILLEGAL_CHARS">
            <annotation>
              <documentation>
                The input string value contains disallowed characters.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_FORMAT">
            <annotation>
              <documentation>
                The input string value is invalid for the associated field.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="StringLengthError.Reason">
        <restriction base="xsd:string">
          <enumeration value="TOO_LONG"/>
          <enumeration value="TOO_SHORT"/>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="TranscodeStatus">
        <annotation>
          <documentation>
            Possible server side transcoding states.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNKNOWN"/>
          <enumeration value="NOT_READY"/>
          <enumeration value="COMPLETED"/>
          <enumeration value="FAILED"/>
          <enumeration value="NEEDS_TRANSCODE"/>
          <enumeration value="IN_PROGRESS"/>
        </restriction>
      </simpleType>
      <simpleType name="VideoAdTagError.Reason">
        <annotation>
          <documentation>
            Describes reasons for {@code VideoAdTagError}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="MISSING_REQUIRED_FIELDS">
            <annotation>
              <documentation>
                One or more required fields are not specified in the ad tag.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NO_LIVE_TRAFFIC">
            <annotation>
              <documentation>
                Ad tag URL is not a live traffic URL. Url should start with:
                https://pubads.g.doubleclick.net/gampad/live/ads,
                not https://pubads.g.doubleclick.net/gampad/ads
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NO_VOD_TRAFFIC">
            <annotation>
              <documentation>
                Ad tag URL is not a VOD traffic URL. Url should start with:
                https://pubads.g.doubleclick.net/gampad/ads , not
                https://pubads.g.doubleclick.net/gampad/live/ads
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_AD_TAG_HOST">
            <annotation>
              <documentation>
                URL hostname is not a valid Google Publisher Tag or Freewheel Tag host name.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_SCHEME">
            <annotation>
              <documentation>
                Only HTTPS is supported.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <element name="createLiveStreamEvents">
        <annotation>
          <documentation>
            Creates new {@link LiveStreamEvent} objects.
            
            The following fields are required:
            &lt;ul&gt;
            &lt;li&gt;{@link LiveStreamEvent#name}&lt;/li&gt;
            &lt;li&gt;{@link LiveStreamEvent#startDateTime}&lt;/li&gt;
            &lt;li&gt;{@link LiveStreamEvent#endDateTime}&lt;/li&gt;
            &lt;li&gt;{@link LiveStreamEvent#contentUrls}&lt;/li&gt;
            &lt;li&gt;{@link LiveStreamEvent#adTags}&lt;/li&gt;
            &lt;/ul&gt;
            
            @param liveStreamEvents the live stream events to create
            @return the created live stream events with their IDs filled in
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0"
              name="liveStreamEvents" type="tns:LiveStreamEvent"/>
          </sequence>
        </complexType>
      </element>
      <element name="createLiveStreamEventsResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="rval" type="tns:LiveStreamEvent"/>
          </sequence>
        </complexType>
      </element>
      <element name="ApiExceptionFault" type="tns:ApiException">
        <annotation>
          <documentation>
            A fault element of type ApiException.
          </documentation>
        </annotation>
      </element>
      <element name="createSlates">
        <annotation>
          <documentation>
            Create new slates.
            
            &lt;p&gt;A slate creative is served as backup content in a live stream event when no other
            creatives are eligible to be served.
            
            @param slates list of slate objects to create.
            @throws ApiException if there is an error while fetching the logging information
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="slates" type="tns:Slate"/>
          </sequence>
        </complexType>
      </element>
      <element name="createSlatesResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="rval" type="tns:Slate"/>
          </sequence>
        </complexType>
      </element>
      <element name="getLiveStreamEventsByStatement">
        <annotation>
          <documentation>
            Gets a {@link LiveStreamEventPage} of {@link LiveStreamEvent} objects that
            satisfy the given {@link Statement#query}. The following fields are
            supported for filtering:
            
            &lt;table&gt;
            &lt;tr&gt;
            &lt;th scope="col"&gt;PQL Property&lt;/th&gt; &lt;th scope="col"&gt;Object Property&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code id}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#id}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code slateCreativeId}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#slateCreativeId}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code assetKey}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#assetKey}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code streamCreateDaiAuthenticationKeyIds}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#streamCreateDaiAuthenticationKeyIds}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code dynamicAdInsertionType}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#dynamicAdInsertionType}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code streamingFormat}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#streamingFormat}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code customAssetKey}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#customAssetKey}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code daiEncodingProfileIds}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#daiEncodingProfileIds}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code segmentUrlAuthenticationKeyIds}&lt;/td&gt;
            &lt;td&gt;{@link LiveStreamEvent#segmentUrlAuthenticationKeyIds}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/table&gt;
            
            @param filterStatement a Publisher Query Language statement to filter a
            list of live stream events
            @return the live stream events that match the filter
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="filterStatement" type="tns:Statement"/>
          </sequence>
        </complexType>
      </element>
      <element name="getLiveStreamEventsByStatementResponse">
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="rval" type="tns:LiveStreamEventPage"/>
          </sequence>
        </complexType>
      </element>
      <element name="getSlatesByStatement">
        <annotation>
          <documentation>
            Gets a {@link SlatePage} of {@link Slate} objects that satisfy the
            given {@link Statement#query}. The following fields are supported for
            filtering:
            
            &lt;table&gt;
            &lt;tr&gt;
            &lt;th scope="col"&gt;PQL Property&lt;/th&gt; &lt;th scope="col"&gt;Object Property&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code id}&lt;/td&gt;
            &lt;td&gt;{@link Slate#id}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code name}&lt;/td&gt;
            &lt;td&gt;{@link Slate#name}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code lastModifiedDateTime}&lt;/td&gt;
            &lt;td&gt;{@link Slate#lastModifiedDateTime}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/table&gt;
            
            @param statement a Publisher Query Language statement used to filter slates
            @return the slates that match the given filter
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="statement" type="tns:Statement"/>
          </sequence>
        </complexType>
      </element>
      <element name="getSlatesByStatementResponse">
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="rval" type="tns:SlatePage"/>
          </sequence>
        </complexType>
      </element>
      <element name="performLiveStreamEventAction">
        <annotation>
          <documentation>
            Performs actions on {@link LiveStreamEvent} objects that match the given
            {@link Statement#query}.
            
            @param liveStreamEventAction the action to perform
            @param filterStatement a Publisher Query Language statement used to filter
            a set of live stream events
            @return the result of the action performed
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0"
              name="liveStreamEventAction" type="tns:LiveStreamEventAction"/>
            <element maxOccurs="1" minOccurs="0" name="filterStatement" type="tns:Statement"/>
          </sequence>
        </complexType>
      </element>
      <element name="performLiveStreamEventActionResponse">
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="rval" type="tns:UpdateResult"/>
          </sequence>
        </complexType>
      </element>
      <element name="performSlateAction">
        <annotation>
          <documentation>
            Performs actions on slates that match the given {@link Statement}.
            
            @param slateAction the action to perform
            @param filterStatement a Publisher Query Language statement used to filter a set of slates
            @return the result of the action performed
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="slateAction" type="tns:SlateAction"/>
            <element maxOccurs="1" minOccurs="0" name="filterStatement" type="tns:Statement"/>
          </sequence>
        </complexType>
      </element>
      <element name="performSlateActionResponse">
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="rval" type="tns:UpdateResult"/>
          </sequence>
        </complexType>
      </element>
      <element name="updateLiveStreamEvents">
        <annotation>
          <documentation>
            Updates the specified {@link LiveStreamEvent} objects.
            
            @param liveStreamEvents the live stream events to update
            @return the updated live stream events
            @throws ApiException if there is an error updating the live stream events
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0"
              name="liveStreamEvents" type="tns:LiveStreamEvent"/>
          </sequence>
        </complexType>
      </element>
      <element name="updateLiveStreamEventsResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="rval" type="tns:LiveStreamEvent"/>
          </sequence>
        </complexType>
      </element>
      <element name="updateSlates">
        <annotation>
          <documentation>
            Update existing slates.
            
            &lt;p&gt;Only the slateName is editable.
            
            @param slates list of slate objects to update.
            @throws ApiException if there is an error while fetching the logging information
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="slates" type="tns:Slate"/>
          </sequence>
        </complexType>
      </element>
      <element name="updateSlatesResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="rval" type="tns:Slate"/>
          </sequence>
        </complexType>
      </element>
      <element name="RequestHeader" type="tns:SoapRequestHeader"/>
      <element name="ResponseHeader" type="tns:SoapResponseHeader"/>
    </schema>
  </wsdl:types>
  <wsdl:message name="RequestHeader">
    <wsdl:part element="tns:RequestHeader" name="RequestHeader"/>
  </wsdl:message>
  <wsdl:message name="ResponseHeader">
    <wsdl:part element="tns:ResponseHeader" name="ResponseHeader"/>
  </wsdl:message>
  <wsdl:message name="createLiveStreamEventsRequest">
    <wsdl:part element="tns:createLiveStreamEvents" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createLiveStreamEventsResponse">
    <wsdl:part element="tns:createLiveStreamEventsResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="ApiException">
    <wsdl:part element="tns:ApiExceptionFault" name="ApiException"/>
  </wsdl:message>
  <wsdl:message name="createSlatesRequest">
    <wsdl:part element="tns:createSlates" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createSlatesResponse">
    <wsdl:part element="tns:createSlatesResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getLiveStreamEventsByStatementRequest">
    <wsdl:part element="tns:getLiveStreamEventsByStatement" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getLiveStreamEventsByStatementResponse">
    <wsdl:part element="tns:getLiveStreamEventsByStatementResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getSlatesByStatementRequest">
    <wsdl:part element="tns:getSlatesByStatement" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getSlatesByStatementResponse">
    <wsdl:part element="tns:getSlatesByStatementResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="performLiveStreamEventActionRequest">
    <wsdl:part element="tns:performLiveStreamEventAction" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="performLiveStreamEventActionResponse">
    <wsdl:part element="tns:performLiveStreamEventActionResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="performSlateActionRequest">
    <wsdl:part element="tns:performSlateAction" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="performSlateActionResponse">
    <wsdl:part element="tns:performSlateActionResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="updateLiveStreamEventsRequest">
    <wsdl:part element="tns:updateLiveStreamEvents" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="updateLiveStreamEventsResponse">
    <wsdl:part element="tns:updateLiveStreamEventsResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="updateSlatesRequest">
    <wsdl:part element="tns:updateSlates" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="updateSlatesResponse">
    <wsdl:part element="tns:updateSlatesResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="LiveStreamEventServiceInterface">
    <wsdl:documentation>
      Provides methods for creating, updating and retrieving {@link LiveStreamEvent} objects.
      
      &lt;p&gt;This feature is only available for Ad Manager 360 networks.
      Publishers will need to be activated through the &lt;b&gt;Video &gt; Live streams&lt;/b&gt;
      tab in the Ad Manager UI. For access, apply through your account manager.
    </wsdl:documentation>
    <wsdl:operation name="createLiveStreamEvents">
      <wsdl:documentation>
        Creates new {@link LiveStreamEvent} objects.
        
        The following fields are required:
        &lt;ul&gt;
        &lt;li&gt;{@link LiveStreamEvent#name}&lt;/li&gt;
        &lt;li&gt;{@link LiveStreamEvent#startDateTime}&lt;/li&gt;
        &lt;li&gt;{@link LiveStreamEvent#endDateTime}&lt;/li&gt;
        &lt;li&gt;{@link LiveStreamEvent#contentUrls}&lt;/li&gt;
        &lt;li&gt;{@link LiveStreamEvent#adTags}&lt;/li&gt;
        &lt;/ul&gt;
        
        @param liveStreamEvents the live stream events to create
        @return the created live stream events with their IDs filled in
      </wsdl:documentation>
      <wsdl:input message="tns:createLiveStreamEventsRequest" name="createLiveStreamEventsRequest"/>
      <wsdl:output message="tns:createLiveStreamEventsResponse" name="createLiveStreamEventsResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="createSlates">
      <wsdl:documentation>
        Create new slates.
        
        &lt;p&gt;A slate creative is served as backup content in a live stream event when no other
        creatives are eligible to be served.
        
        @param slates list of slate objects to create.
        @throws ApiException if there is an error while fetching the logging information
      </wsdl:documentation>
      <wsdl:input message="tns:createSlatesRequest" name="createSlatesRequest"/>
      <wsdl:output message="tns:createSlatesResponse" name="createSlatesResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="getLiveStreamEventsByStatement">
      <wsdl:documentation>
        Gets a {@link LiveStreamEventPage} of {@link LiveStreamEvent} objects that
        satisfy the given {@link Statement#query}. The following fields are
        supported for filtering:
        
        &lt;table&gt;
        &lt;tr&gt;
        &lt;th scope="col"&gt;PQL Property&lt;/th&gt; &lt;th scope="col"&gt;Object Property&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code id}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#id}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code slateCreativeId}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#slateCreativeId}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code assetKey}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#assetKey}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code streamCreateDaiAuthenticationKeyIds}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#streamCreateDaiAuthenticationKeyIds}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code dynamicAdInsertionType}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#dynamicAdInsertionType}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code streamingFormat}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#streamingFormat}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code customAssetKey}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#customAssetKey}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code daiEncodingProfileIds}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#daiEncodingProfileIds}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code segmentUrlAuthenticationKeyIds}&lt;/td&gt;
        &lt;td&gt;{@link LiveStreamEvent#segmentUrlAuthenticationKeyIds}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/table&gt;
        
        @param filterStatement a Publisher Query Language statement to filter a
        list of live stream events
        @return the live stream events that match the filter
      </wsdl:documentation>
      <wsdl:input message="tns:getLiveStreamEventsByStatementRequest" name="getLiveStreamEventsByStatementRequest"/>
      <wsdl:output message="tns:getLiveStreamEventsByStatementResponse" name="getLiveStreamEventsByStatementResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="getSlatesByStatement">
      <wsdl:documentation>
        Gets a {@link SlatePage} of {@link Slate} objects that satisfy the
        given {@link Statement#query}. The following fields are supported for
        filtering:
        
        &lt;table&gt;
        &lt;tr&gt;
        &lt;th scope="col"&gt;PQL Property&lt;/th&gt; &lt;th scope="col"&gt;Object Property&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code id}&lt;/td&gt;
        &lt;td&gt;{@link Slate#id}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code name}&lt;/td&gt;
        &lt;td&gt;{@link Slate#name}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code lastModifiedDateTime}&lt;/td&gt;
        &lt;td&gt;{@link Slate#lastModifiedDateTime}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/table&gt;
        
        @param statement a Publisher Query Language statement used to filter slates
        @return the slates that match the given filter
      </wsdl:documentation>
      <wsdl:input message="tns:getSlatesByStatementRequest" name="getSlatesByStatementRequest"/>
      <wsdl:output message="tns:getSlatesByStatementResponse" name="getSlatesByStatementResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="performLiveStreamEventAction">
      <wsdl:documentation>
        Performs actions on {@link LiveStreamEvent} objects that match the given
        {@link Statement#query}.
        
        @param liveStreamEventAction the action to perform
        @param filterStatement a Publisher Query Language statement used to filter
        a set of live stream events
        @return the result of the action performed
      </wsdl:documentation>
      <wsdl:input message="tns:performLiveStreamEventActionRequest" name="performLiveStreamEventActionRequest"/>
      <wsdl:output message="tns:performLiveStreamEventActionResponse" name="performLiveStreamEventActionResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="performSlateAction">
      <wsdl:documentation>
        Performs actions on slates that match the given {@link Statement}.
        
        @param slateAction the action to perform
        @param filterStatement a Publisher Query Language statement used to filter a set of slates
        @return the result of the action performed
      </wsdl:documentation>
      <wsdl:input message="tns:performSlateActionRequest" name="performSlateActionRequest"/>
      <wsdl:output message="tns:performSlateActionResponse" name="performSlateActionResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="updateLiveStreamEvents">
      <wsdl:documentation>
        Updates the specified {@link LiveStreamEvent} objects.
        
        @param liveStreamEvents the live stream events to update
        @return the updated live stream events
        @throws ApiException if there is an error updating the live stream events
      </wsdl:documentation>
      <wsdl:input message="tns:updateLiveStreamEventsRequest" name="updateLiveStreamEventsRequest"/>
      <wsdl:output message="tns:updateLiveStreamEventsResponse" name="updateLiveStreamEventsResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="updateSlates">
      <wsdl:documentation>
        Update existing slates.
        
        &lt;p&gt;Only the slateName is editable.
        
        @param slates list of slate objects to update.
        @throws ApiException if there is an error while fetching the logging information
      </wsdl:documentation>
      <wsdl:input message="tns:updateSlatesRequest" name="updateSlatesRequest"/>
      <wsdl:output message="tns:updateSlatesResponse" name="updateSlatesResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="LiveStreamEventServiceSoapBinding" type="tns:LiveStreamEventServiceInterface">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="createLiveStreamEvents">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="createLiveStreamEventsRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createLiveStreamEventsResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="createSlates">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="createSlatesRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createSlatesResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getLiveStreamEventsByStatement">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getLiveStreamEventsByStatementRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getLiveStreamEventsByStatementResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSlatesByStatement">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getSlatesByStatementRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSlatesByStatementResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="performLiveStreamEventAction">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="performLiveStreamEventActionRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="performLiveStreamEventActionResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="performSlateAction">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="performSlateActionRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="performSlateActionResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateLiveStreamEvents">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="updateLiveStreamEventsRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateLiveStreamEventsResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateSlates">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="updateSlatesRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateSlatesResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="LiveStreamEventService">
    <wsdl:port binding="tns:LiveStreamEventServiceSoapBinding" name="LiveStreamEventServiceInterfacePort">
      <wsdlsoap:address location="https://ads.google.com/apis/ads/publisher/v202202/LiveStreamEventService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
