<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated file, do not edit -->
<!-- Copyright 2022 Google Inc. All Rights Reserved -->
<wsdl:definitions
  targetNamespace="https://www.google.com/apis/ads/publisher/v202111"
  xmlns:tns="https://www.google.com/apis/ads/publisher/v202111"
  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
  xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <schema elementFormDefault="qualified" jaxb:version="1.0"
      targetNamespace="https://www.google.com/apis/ads/publisher/v202111"
      xmlns="http://www.w3.org/2001/XMLSchema"
      xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:tns="https://www.google.com/apis/ads/publisher/v202111">
      <annotation>
        <appinfo>
          <jaxb:globalBindings typesafeEnumMaxMembers="999999"/>
        </appinfo>
      </annotation>
      <complexType abstract="true" name="ObjectValue">
        <annotation>
          <documentation>
            Contains an object value.
            &lt;p&gt;
            &lt;b&gt;This object is experimental!
            &lt;code&gt;ObjectValue&lt;/code&gt; is an experimental, innovative, and rapidly
            changing new feature for Ad Manager. Unfortunately, being on the bleeding edge means that
            we may make backwards-incompatible changes to
            &lt;code&gt;ObjectValue&lt;/code&gt;. We will inform the community when this feature
            is no longer experimental.&lt;/b&gt;
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ActivateCreativeWrappers">
        <annotation>
          <documentation>
            The action used for activating {@link CreativeWrapper} objects.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:CreativeWrapperAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType abstract="true" name="ApiError">
        <annotation>
          <documentation>
            The API error base class that provides details about an error that occurred
            while processing a service request.
            
            &lt;p&gt;The OGNL field path is provided for parsers to identify the request data
            element that may have caused the error.&lt;/p&gt;
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="fieldPath" type="xsd:string">
            <annotation>
              <documentation>
                The OGNL field path to identify cause of error.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="fieldPathElements" type="tns:FieldPathElement">
            <annotation>
              <documentation>
                A parsed copy of the field path. For example, the field path "operations[1].operand"
                corresponds to this list: {FieldPathElement(field = "operations", index = 1),
                FieldPathElement(field = "operand", index = null)}.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="trigger" type="xsd:string">
            <annotation>
              <documentation>
                The data that caused the error.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="errorString" type="xsd:string">
            <annotation>
              <documentation>
                A simple string representation of the error and reason.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="ApiException">
        <annotation>
          <documentation>
            Exception class for holding a list of service errors.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApplicationException">
            <sequence>
              <element maxOccurs="unbounded" minOccurs="0" name="errors" type="tns:ApiError">
                <annotation>
                  <documentation>
                    List of errors.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ApiVersionError">
        <annotation>
          <documentation>
            Errors related to the usage of API versions.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ApiVersionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ApplicationException">
        <annotation>
          <documentation>
            Base class for exceptions.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="message" type="xsd:string">
            <annotation>
              <documentation>
                Error message.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="AuthenticationError">
        <annotation>
          <documentation>
            An error for an exception that occurred when authenticating.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:AuthenticationError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="BooleanValue">
        <annotation>
          <documentation>
            Contains a boolean value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:boolean">
                <annotation>
                  <documentation>
                    The boolean value.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CollectionSizeError">
        <annotation>
          <documentation>
            Error for the size of the collection being too large
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:CollectionSizeError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CommonError">
        <annotation>
          <documentation>
            A place for common errors that can be used across services.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:CommonError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ConversionEvent_TrackingUrlsMapEntry">
        <annotation>
          <documentation>
            This represents an entry in a map with a key of type ConversionEvent
            and value of type TrackingUrls.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="key" type="tns:ConversionEvent"/>
          <element maxOccurs="1" minOccurs="0" name="value" type="tns:TrackingUrls"/>
        </sequence>
      </complexType>
      <complexType abstract="true" name="CreativeWrapperAction">
        <annotation>
          <documentation>
            Represents the actions that can be performed on {@link CreativeWrapper}
            objects.
          </documentation>
        </annotation>
        <sequence/>
      </complexType>
      <complexType name="CreativeWrapper">
        <annotation>
          <documentation>
            A {@code CreativeWrapper} allows the wrapping of HTML snippets to be
            served along with {@code Creative} objects.
            &lt;p&gt;
            Creative wrappers must be associated with a
            {@link LabelType#CREATIVE_WRAPPER} label and applied to ad units by
            {@link AdUnit#appliedLabels}.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="id" type="xsd:long">
            <annotation>
              <documentation>
                The unique ID of the {@code CreativeWrapper}. This value is readonly
                and is assigned by Google.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="labelId" type="xsd:long">
            <annotation>
              <documentation>
                The ID of the {@link Label} which will be used to label ad units. The
                {@code labelId} on a creative wrapper cannot be changed once it is
                created.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="creativeWrapperType" type="tns:CreativeWrapperType">
            <annotation>
              <documentation>
                The creative wrapper type. If the creative wrapper type is
                {@link CreativeWrapperType#VIDEO_TRACKING_URL}, the {@code videoTrackingUrls} field must be
                set. If the creative wrapper type is {@link CreativeWrapperType#HTML}, either the
                {@code header} or {@code footer} field must be set. This field is required.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="htmlHeader" type="xsd:string">
            <annotation>
              <documentation>
                The header HTML snippet that this creative wrapper delivers.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="htmlFooter" type="xsd:string">
            <annotation>
              <documentation>
                The footer HTML snippet that this creative wrapper delivers.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="ampHead" type="xsd:string">
            <annotation>
              <documentation>
                The header AMP snippet that this creative wrapper delivers.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="ampBody" type="xsd:string">
            <annotation>
              <documentation>
                The footer AMP snippet that this creative wrapper delivers.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0"
            name="videoTrackingUrls" type="tns:ConversionEvent_TrackingUrlsMapEntry">
            <annotation>
              <documentation>
                The video tracking URLs that this creative wrapper delivers. This field is required if the
                {@code creativeWrapperType} is {@link CreativeWrapperType#VIDEO_TRACKING_URL} and ignored
                otherwise.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0"
            name="thirdPartyDataDeclaration" type="tns:ThirdPartyDataDeclaration">
            <annotation>
              <documentation>
                The {@code ThirdPartyDataDeclaration} for this creative wrapper.
                
                &lt;p&gt;It is copied to one of the underlying creatives. If the header creative is active then it is
                persisted there. Otherwise it is stored on the footer creative.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="ordering" type="tns:CreativeWrapperOrdering">
            <annotation>
              <documentation>
                If there are multiple wrappers for a creative, then
                {@code ordering} defines the order in which the HTML
                snippets are rendered.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="status" type="tns:CreativeWrapperStatus">
            <annotation>
              <documentation>
                The status of the {@code CreativeWrapper}. This attribute is readonly.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="CreativeWrapperError">
        <annotation>
          <documentation>
            Errors specific to creative wrappers.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:CreativeWrapperError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CreativeWrapperPage">
        <annotation>
          <documentation>
            Captures a page of {@link CreativeWrapper} objects.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="totalResultSetSize" type="xsd:int">
            <annotation>
              <documentation>
                The size of the total result set to which this page belongs.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="startIndex" type="xsd:int">
            <annotation>
              <documentation>
                The absolute index in the total result set on which this page begins.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0" name="results" type="tns:CreativeWrapper">
            <annotation>
              <documentation>
                The collection of creative wrappers contained within this page.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="Date">
        <annotation>
          <documentation>
            Represents a date.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="year" type="xsd:int">
            <annotation>
              <documentation>
                Year (e.g., 2009)
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="month" type="xsd:int">
            <annotation>
              <documentation>
                Month (1..12)
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="day" type="xsd:int">
            <annotation>
              <documentation>
                Day (1..31)
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="DateTime">
        <annotation>
          <documentation>
            Represents a date combined with the time of day.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="date" type="tns:Date"/>
          <element maxOccurs="1" minOccurs="0" name="hour" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="minute" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="second" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="timeZoneId" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="DateTimeValue">
        <annotation>
          <documentation>
            Contains a date-time value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="tns:DateTime">
                <annotation>
                  <documentation>
                    The {@code DateTime} value.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DateValue">
        <annotation>
          <documentation>
            Contains a date value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="tns:Date">
                <annotation>
                  <documentation>
                    The {@code Date} value.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DeactivateCreativeWrappers">
        <annotation>
          <documentation>
            The action used for deactivating {@link CreativeWrapper} objects.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:CreativeWrapperAction">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FeatureError">
        <annotation>
          <documentation>
            Errors related to feature management.  If you attempt using a feature that is not available to
            the current network you'll receive a FeatureError with the missing feature as the trigger.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:FeatureError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FieldPathElement">
        <annotation>
          <documentation>
            A segment of a field path. Each dot in a field path defines a new segment.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="field" type="xsd:string">
            <annotation>
              <documentation>
                The name of a field in lower camelcase. (e.g. "biddingStrategy")
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="index" type="xsd:int">
            <annotation>
              <documentation>
                For list fields, this is a 0-indexed position in the list. Null for non-list fields.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="InternalApiError">
        <annotation>
          <documentation>
            Indicates that a server-side error has occured. {@code InternalApiError}s
            are generally not the result of an invalid request or message sent by the
            client.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:InternalApiError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LabelError">
        <annotation>
          <documentation>
            Errors specific to labels.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:LabelError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NotNullError">
        <annotation>
          <documentation>
            Caused by supplying a null value for an attribute that cannot be null.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:NotNullError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NullError">
        <annotation>
          <documentation>
            Errors associated with violation of a NOT NULL check.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:NullError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NumberValue">
        <annotation>
          <documentation>
            Contains a numeric value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
                <annotation>
                  <documentation>
                    The numeric value represented as a string.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ParseError">
        <annotation>
          <documentation>
            Lists errors related to parsing.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ParseError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PermissionError">
        <annotation>
          <documentation>
            Errors related to incorrect permission.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PermissionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PublisherQueryLanguageContextError">
        <annotation>
          <documentation>
            An error that occurs while executing a PQL query contained in
            a {@link Statement} object.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PublisherQueryLanguageContextError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PublisherQueryLanguageSyntaxError">
        <annotation>
          <documentation>
            An error that occurs while parsing a PQL query contained in a
            {@link Statement} object.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PublisherQueryLanguageSyntaxError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="QuotaError">
        <annotation>
          <documentation>
            Describes a client-side error on which a user is attempting
            to perform an action to which they have no quota remaining.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:QuotaError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RequiredCollectionError">
        <annotation>
          <documentation>
            A list of all errors to be used for validating sizes of collections.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:RequiredCollectionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RequiredError">
        <annotation>
          <documentation>
            Errors due to missing required field.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:RequiredError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ServerError">
        <annotation>
          <documentation>
            Errors related to the server.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ServerError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SetValue">
        <annotation>
          <documentation>
            Contains a set of {@link Value Values}. May not contain duplicates.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="unbounded" minOccurs="0" name="values" type="tns:Value">
                <annotation>
                  <documentation>
                    The values. They must all be the same type of {@code Value} and not contain duplicates.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SoapRequestHeader">
        <annotation>
          <documentation>
            Represents the SOAP request header used by API requests.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="networkCode" type="xsd:string">
            <annotation>
              <documentation>
                The network code to use in the context of a request.
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="1" minOccurs="0" name="applicationName" type="xsd:string">
            <annotation>
              <documentation>
                The name of client library application.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="SoapResponseHeader">
        <annotation>
          <documentation>
            Represents the SOAP request header used by API responses.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="requestId" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="responseTime" type="xsd:long"/>
        </sequence>
      </complexType>
      <complexType name="Statement">
        <annotation>
          <documentation>
            Captures the {@code WHERE}, {@code ORDER BY} and {@code LIMIT} clauses of a
            PQL query. Statements are typically used to retrieve objects of a predefined
            domain type, which makes SELECT clause unnecessary.
            &lt;p&gt;
            An example query text might be {@code "WHERE status = 'ACTIVE' ORDER BY id
            LIMIT 30"}.
            &lt;/p&gt;
            &lt;p&gt;
            Statements support bind variables. These are substitutes for literals
            and can be thought of as input parameters to a PQL query.
            &lt;/p&gt;
            &lt;p&gt;
            An example of such a query might be {@code "WHERE id = :idValue"}.
            &lt;/p&gt;
            &lt;p&gt;
            Statements also support use of the LIKE keyword. This provides wildcard string matching.
            &lt;/p&gt;
            &lt;p&gt;
            An example of such a query might be {@code "WHERE name LIKE '%searchString%'"}.
            &lt;/p&gt;
            The value for the variable idValue must then be set with an object of type
            {@link Value}, e.g., {@link NumberValue}, {@link TextValue} or
            {@link BooleanValue}.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="query" type="xsd:string">
            <annotation>
              <documentation>
                Holds the query in PQL syntax. The syntax is:&lt;br&gt;
                &lt;code&gt;[WHERE &lt;condition&gt; {[AND | OR] &lt;condition&gt; ...}]&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;[ORDER BY &lt;property&gt; [ASC | DESC]]&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;[LIMIT {[&lt;offset&gt;,] &lt;count&gt;} | {&lt;count&gt; OFFSET &lt;offset&gt;}]&lt;/code&gt;&lt;br&gt;
                &lt;p&gt;
                &lt;code&gt;&lt;condition&gt;&lt;/code&gt;&lt;br&gt;
                &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                &lt;code&gt;:= &lt;property&gt; {&lt; | &lt;= | &gt; | &gt;= | = | != } &lt;value&gt;&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;condition&gt;&lt;/code&gt;&lt;br&gt;
                &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;
                &lt;code&gt;:= &lt;property&gt; {&lt; | &lt;= | &gt; | &gt;= | = | != } &lt;bind variable&gt;&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;condition&gt; := &lt;property&gt; IN &lt;list&gt;&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;condition&gt; := &lt;property&gt; IS NULL&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;condition&gt; := &lt;property&gt; LIKE &lt;wildcard%match&gt;&lt;/code&gt;&lt;br&gt;
                &lt;code&gt;&lt;bind variable&gt; := :&lt;name&gt;&lt;/code&gt;&lt;br&gt;
                &lt;/p&gt;
              </documentation>
            </annotation>
          </element>
          <element maxOccurs="unbounded" minOccurs="0" name="values" type="tns:String_ValueMapEntry">
            <annotation>
              <documentation>
                Holds keys and values for bind variables and their values. The key is the
                name of the bind variable. The value is the literal value of the variable.
                &lt;p&gt;
                In the example {@code "WHERE status = :bindStatus ORDER BY id LIMIT 30"},
                the bind variable, represented by {@code :bindStatus} is named {@code
                bindStatus}, which would also be the parameter map key. The bind variable's
                value would be represented by a parameter map value of type
                {@link TextValue}. The final result, for example, would be an entry of
                {@code "bindStatus" =&gt; StringParam("ACTIVE")}.
                &lt;/p&gt;
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="StatementError">
        <annotation>
          <documentation>
            An error that occurs while parsing {@link Statement} objects.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StatementError.Reason">
                <annotation>
                  <documentation>
                    The error reason represented by an enum.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="StringFormatError">
        <annotation>
          <documentation>
            A list of error code for reporting invalid content of input strings.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StringFormatError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="StringLengthError">
        <annotation>
          <documentation>
            Errors for Strings which do not meet given length constraints.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StringLengthError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="String_ValueMapEntry">
        <annotation>
          <documentation>
            This represents an entry in a map with a key of type String
            and value of type Value.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="key" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="value" type="tns:Value"/>
        </sequence>
      </complexType>
      <complexType name="TextValue">
        <annotation>
          <documentation>
            Contains a string value.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:string">
                <annotation>
                  <documentation>
                    The string value.
                  </documentation>
                </annotation>
              </element>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ThirdPartyDataDeclaration">
        <annotation>
          <documentation>
            Represents a set of declarations about what (if any) third party companies are
            associated with a given creative.
            
            &lt;p&gt;This can be set at the network level, as a default for all creatives, or overridden for a
            particular creative.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="declarationType" type="tns:DeclarationType"/>
          <element maxOccurs="unbounded" minOccurs="0"
            name="thirdPartyCompanyIds" type="xsd:long"/>
        </sequence>
      </complexType>
      <complexType name="TrackingUrls">
        <annotation>
          <documentation>
            A list of URLs that should be pinged for a conversion event.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="urls" type="xsd:string">
            <annotation>
              <documentation>
                A list of all URLs that should be pinged.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType name="TypeError">
        <annotation>
          <documentation>
            An error for a field which is an invalid type.
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="UniqueError">
        <annotation>
          <documentation>
            An error for a field which must satisfy a uniqueness constraint
          </documentation>
        </annotation>
        <complexContent>
          <extension base="tns:ApiError">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="UpdateResult">
        <annotation>
          <documentation>
            Represents the result of performing an action on objects.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="numChanges" type="xsd:int">
            <annotation>
              <documentation>
                The number of objects that were changed as a result of performing the
                action.
              </documentation>
            </annotation>
          </element>
        </sequence>
      </complexType>
      <complexType abstract="true" name="Value">
        <annotation>
          <documentation>
            {@code Value} represents a value.
          </documentation>
        </annotation>
        <sequence/>
      </complexType>
      <simpleType name="ApiVersionError.Reason">
        <restriction base="xsd:string">
          <enumeration value="UPDATE_TO_NEWER_VERSION">
            <annotation>
              <documentation>
                Indicates that the operation is not allowed in the version the request
                was made in.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="AuthenticationError.Reason">
        <restriction base="xsd:string">
          <enumeration value="AMBIGUOUS_SOAP_REQUEST_HEADER">
            <annotation>
              <documentation>
                The SOAP message contains a request header with an ambiguous definition of the authentication
                header fields. This means either the {@code authToken} and {@code oAuthToken} fields were
                both null or both were specified. Exactly one value should be specified with each request.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_EMAIL">
            <annotation>
              <documentation>
                The login provided is invalid.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="AUTHENTICATION_FAILED">
            <annotation>
              <documentation>
                Tried to authenticate with provided information, but failed.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_OAUTH_SIGNATURE">
            <annotation>
              <documentation>
                The OAuth provided is invalid.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_SERVICE">
            <annotation>
              <documentation>
                The specified service to use was not recognized.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MISSING_SOAP_REQUEST_HEADER">
            <annotation>
              <documentation>
                The SOAP message is missing a request header with an {@code authToken} and optional {@code
                networkCode}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MISSING_AUTHENTICATION_HTTP_HEADER">
            <annotation>
              <documentation>
                The HTTP request is missing a request header with an {@code authToken}
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MISSING_AUTHENTICATION">
            <annotation>
              <documentation>
                The request is missing an {@code authToken}
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NETWORK_API_ACCESS_DISABLED">
            <annotation>
              <documentation>
                The network does not have API access enabled.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NO_NETWORKS_TO_ACCESS">
            <annotation>
              <documentation>
                The user is not associated with any network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NETWORK_NOT_FOUND">
            <annotation>
              <documentation>
                No network for the given {@code networkCode} was found.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NETWORK_CODE_REQUIRED">
            <annotation>
              <documentation>
                The user has access to more than one network, but did not provide a {@code networkCode}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CONNECTION_ERROR">
            <annotation>
              <documentation>
                An error happened on the server side during connection to authentication service.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK">
            <annotation>
              <documentation>
                The user tried to create a test network using an account that already is associated with a
                network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNDER_INVESTIGATION">
            <annotation>
              <documentation>
                The account is blocked and under investigation by the collections team. Please contact Google
                for more information.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="CollectionSizeError.Reason">
        <restriction base="xsd:string">
          <enumeration value="TOO_LARGE"/>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="CommonError.Reason">
        <annotation>
          <documentation>
            Describes reasons for common errors
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="NOT_FOUND">
            <annotation>
              <documentation>
                Indicates that an attempt was made to retrieve an entity that does not
                exist.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ALREADY_EXISTS">
            <annotation>
              <documentation>
                Indicates that an attempt was made to create an entity that already
                exists.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NOT_APPLICABLE">
            <annotation>
              <documentation>
                Indicates that a value is not applicable for given use case.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DUPLICATE_OBJECT">
            <annotation>
              <documentation>
                Indicates that two elements in the collection were identical.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_UPDATE">
            <annotation>
              <documentation>
                Indicates that an attempt was made to change an immutable field.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNSUPPORTED_OPERATION">
            <annotation>
              <documentation>
                Indicates that the requested operation is not supported.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CONCURRENT_MODIFICATION">
            <annotation>
              <documentation>
                Indicates that another request attempted to update the same data in the same network
                at about the same time. Please wait and try the request again.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="ConversionEvent">
        <annotation>
          <documentation>
            All possible tracking event types.  Not all events are supported by every
            kind of creative.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CREATIVE_VIEW">
            <annotation>
              <documentation>
                Corresponds to the {@code creativeView} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="START">
            <annotation>
              <documentation>
                Corresponds to the {@code start} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="SKIP_SHOWN">
            <annotation>
              <documentation>
                An event that is fired when a video skip button is shown,
                usually after 5 seconds of viewing the video.
                This event does not correspond to any VAST element and is implemented using an extension.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="FIRST_QUARTILE">
            <annotation>
              <documentation>
                Corresponds to the {@code firstQuartile} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MIDPOINT">
            <annotation>
              <documentation>
                Corresponds to the {@code midpoint} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="THIRD_QUARTILE">
            <annotation>
              <documentation>
                Corresponds to the {@code thirdQuartile} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ENGAGED_VIEW">
            <annotation>
              <documentation>
                An event that is fired after 30 seconds of viewing the video
                or when the video finished (if the video duration is less than 30 seconds).
                This event does not correspond to any VAST element and is implemented using an extension.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="COMPLETE">
            <annotation>
              <documentation>
                Corresponds to the {@code complete} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MUTE">
            <annotation>
              <documentation>
                Corresponds to the {@code mute} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNMUTE">
            <annotation>
              <documentation>
                Corresponds to the {@code unmute} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="PAUSE">
            <annotation>
              <documentation>
                Corresponds to the {@code pause} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="REWIND">
            <annotation>
              <documentation>
                Corresponds to the {@code rewind} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="RESUME">
            <annotation>
              <documentation>
                Corresponds to the {@code resume} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="SKIPPED">
            <annotation>
              <documentation>
                An event that is fired when a video was skipped.
                This event does not correspond to any VAST element and is implemented using an extension.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="FULLSCREEN">
            <annotation>
              <documentation>
                Corresponds to the {@code fullscreen} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="EXPAND">
            <annotation>
              <documentation>
                Corresponds to the {@code expand} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="COLLAPSE">
            <annotation>
              <documentation>
                Corresponds to the {@code collapse} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ACCEPT_INVITATION">
            <annotation>
              <documentation>
                Corresponds to the {@code acceptInvitation} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CLOSE">
            <annotation>
              <documentation>
                Corresponds to the {@code close} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CLICK_TRACKING">
            <annotation>
              <documentation>
                Corresponds to the {@code Linear.VideoClicks.ClickTracking} node.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="SURVEY">
            <annotation>
              <documentation>
                Corresponds to the {@code InLine.Survey} node.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CUSTOM_CLICK">
            <annotation>
              <documentation>
                Corresponds to the {@code Linear.VideoClicks.CustomClick} node.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="MEASURABLE_IMPRESSION">
            <annotation>
              <documentation>
                Corresponds to the {@code measurableImpression} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="VIEWABLE_IMPRESSION">
            <annotation>
              <documentation>
                Corresponds to the {@code viewableImpression} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="VIDEO_ABANDON">
            <annotation>
              <documentation>
                Corresponds to the {@code abandon} tracking event.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="FULLY_VIEWABLE_AUDIBLE_HALF_DURATION_IMPRESSION">
            <annotation>
              <documentation>
                Corresponds to the {@code fullyViewableAudibleHalfDurationImpression} tracking event.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="CreativeWrapperError.Reason">
        <annotation>
          <documentation>
            The reasons for the creative wrapper error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="LABEL_ALREADY_ASSOCIATED_WITH_CREATIVE_WRAPPER">
            <annotation>
              <documentation>
                The label is already associated with a {@link CreativeWrapper}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_LABEL_TYPE">
            <annotation>
              <documentation>
                The label type of a creative wrapper must be {@link LabelType#CREATIVE_WRAPPER}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNRECOGNIZED_MACRO">
            <annotation>
              <documentation>
                A macro used inside the snippet is not recognized.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NEITHER_HEADER_NOR_FOOTER_SPECIFIED">
            <annotation>
              <documentation>
                When creating a new creative wrapper, either header or footer should exist.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NEITHER_HEADER_NOR_FOOTER_NOR_VIDEO_TRACKING_URLS_SPECIFIED">
            <annotation>
              <documentation>
                Creative wrapper must have either header and/or footer, or video tracking URLs.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_USE_CREATIVE_WRAPPER_TYPE">
            <annotation>
              <documentation>
                The network has not been enabled for creating labels of type
                {@link LabelType#CREATIVE_WRAPPER}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_UPDATE_LABEL_ID">
            <annotation>
              <documentation>
                Cannot update {@link CreativeWrapper#labelId}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_APPLY_TO_AD_UNIT_WITH_VIDEO_SIZES">
            <annotation>
              <documentation>
                Cannot apply {@link LabelType#CREATIVE_WRAPPER} labels to an ad unit
                if it has no descendants with {@link AdUnit#adUnitSizes} of
                {@code AdUnitSize#environmentType}  as
                {@link EnvironmentType#BROWSER}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_APPLY_TO_AD_UNIT_WITHOUT_VIDEO_SIZES">
            <annotation>
              <documentation>
                Cannot apply {@link LabelType#CREATIVE_WRAPPER} labels with a {@link
                CreativeWrapper#VIDEO_TRACKING_URL} type to an ad unit if it has no descendants with {@link
                AdUnit#adUnitSizes} of {@code AdUnitSize#environmentType} as {@link
                EnvironmentType#VIDEO_PLAYER}.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="CANNOT_APPLY_TO_MOBILE_AD_UNIT">
            <annotation>
              <documentation>
                Cannot apply {@link LabelType#CREATIVE_WRAPPER} labels to an ad unit
                if {@link AdUnit#targetPlatform} is of type {@code TargetPlatform#MOBILE}
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="CreativeWrapperType">
        <annotation>
          <documentation>
            The type of a creative wrapper which is specified on the {@link CreativeWrapper}.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="HTML">
            <annotation>
              <documentation>
                HTML creative wrappers that include header/footer HTML snippets.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="VIDEO_TRACKING_URL">
            <annotation>
              <documentation>
                Video Tracking URL creative wrappers that include tracking URIs.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="DeclarationType">
        <annotation>
          <documentation>
            The declaration about third party data usage on the associated entity.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="NONE">
            <annotation>
              <documentation>
                There are no companies associated.  Functionally the same as DECLARED, combined with
                an empty company list.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DECLARED">
            <annotation>
              <documentation>
                There is a set of {@link RichMediaAdsCompany}s associated with this entity.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="FeatureError.Reason">
        <restriction base="xsd:string">
          <enumeration value="MISSING_FEATURE">
            <annotation>
              <documentation>
                A feature is being used that is not enabled on the current network.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="InternalApiError.Reason">
        <annotation>
          <documentation>
            The single reason for the internal API error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNEXPECTED_INTERNAL_API_ERROR">
            <annotation>
              <documentation>
                API encountered an unexpected internal error.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="TRANSIENT_ERROR">
            <annotation>
              <documentation>
                A temporary error occurred during the request. Please retry.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The cause of the error is not known or only defined in newer versions.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="DOWNTIME">
            <annotation>
              <documentation>
                The API is currently unavailable for a planned downtime.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ERROR_GENERATING_RESPONSE">
            <annotation>
              <documentation>
                Mutate succeeded but server was unable to build response. Client should not retry mutate.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="CreativeWrapperOrdering">
        <annotation>
          <documentation>
            Defines the order in which the header and footer HTML snippets will be
            wrapped around the served creative. {@code INNER} snippets will be wrapped
            first, followed by {@code NO_PREFERENCE} and finally {@code OUTER}. If the
            creative needs to be wrapped with more than one snippet with the same
            {@link CreativeWrapperOrdering}, then the order is unspecified.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="NO_PREFERENCE">
            <annotation>
              <documentation>
                Wrapping occurs after {@link #INNER} but before {@link #OUTER}
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INNER">
            <annotation>
              <documentation>
                Wrapping occurs as early as possible.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="OUTER">
            <annotation>
              <documentation>
                Wrapping occurs after both {@link #NO_PREFERENCE} and {@link #INNER}
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="CreativeWrapperStatus">
        <annotation>
          <documentation>
            Indicates whether the {@code CreativeWrapper} is active. HTML snippets
            are served to creatives only when the creative wrapper is active.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="ACTIVE"/>
          <enumeration value="INACTIVE"/>
        </restriction>
      </simpleType>
      <simpleType name="LabelError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="INVALID_PREFIX">
            <annotation>
              <documentation>
                A user created label cannot begin with the Google internal system label prefix.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="NAME_INVALID_CHARS">
            <annotation>
              <documentation>
                {@link Label#name} contains unsupported or reserved
                characters.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="NotNullError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="ARG1_NULL">
            <annotation>
              <documentation>
                Assuming that a method will not have more than 3 arguments, if it does,
                return NULL
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="ARG2_NULL"/>
          <enumeration value="ARG3_NULL"/>
          <enumeration value="NULL"/>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="NullError.Reason">
        <annotation>
          <documentation>
            The reasons for the validation error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="NULL_CONTENT">
            <annotation>
              <documentation>
                Specified list/container must not contain any null elements
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="ParseError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNPARSABLE">
            <annotation>
              <documentation>
                Indicates an error in parsing an attribute.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="PermissionError.Reason">
        <annotation>
          <documentation>
            Describes reasons for permission errors.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="PERMISSION_DENIED">
            <annotation>
              <documentation>
                User does not have the required permission for the request.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="PublisherQueryLanguageContextError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNEXECUTABLE">
            <annotation>
              <documentation>
                Indicates that there was an error executing the PQL.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="PublisherQueryLanguageSyntaxError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNPARSABLE">
            <annotation>
              <documentation>
                Indicates that there was a PQL syntax error.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="QuotaError.Reason">
        <restriction base="xsd:string">
          <enumeration value="EXCEEDED_QUOTA">
            <annotation>
              <documentation>
                The number of requests made per second is too high and has exceeded the
                allowable limit. The recommended approach to handle this error is to wait
                about 5 seconds and then retry the request. Note that this does not
                guarantee the request will succeed. If it fails again, try increasing the
                wait time.
                &lt;p&gt;Another way to mitigate this error is to limit requests to 8 per second for Ad Manager
                360 accounts, or 2 per second for Ad Manager accounts. Once again
                this does not guarantee that every request will succeed, but may help
                reduce the number of times you receive this error.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="REPORT_JOB_LIMIT">
            <annotation>
              <documentation>
                This user has exceeded the allowed number of new report requests per hour
                (this includes both reports run via the UI and reports
                run via {@link ReportService#runReportJob}).
                The recommended approach to handle this error is to wait about 10 minutes
                and then retry the request. Note that this does not guarantee the request
                will succeed. If it fails again, try increasing the wait time.
                &lt;p&gt;Another way to mitigate this error is to limit the number of new report
                requests to 250 per hour per user. Once again, this does not guarantee that
                every request will succeed, but may help reduce the number of times you
                receive this error.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="RequiredCollectionError.Reason">
        <restriction base="xsd:string">
          <enumeration value="REQUIRED">
            <annotation>
              <documentation>
                A required collection is missing.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="TOO_LARGE">
            <annotation>
              <documentation>
                Collection size is too large.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="TOO_SMALL">
            <annotation>
              <documentation>
                Collection size is too small.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="RequiredError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="REQUIRED">
            <annotation>
              <documentation>
                Missing required field.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="ServerError.Reason">
        <annotation>
          <documentation>
            Describes reasons for server errors
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="SERVER_ERROR">
            <annotation>
              <documentation>
                Indicates that an unexpected error occured.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="SERVER_BUSY">
            <annotation>
              <documentation>
                Indicates that the server is currently experiencing a high load. Please
                wait and try your request again.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="StatementError.Reason">
        <restriction base="xsd:string">
          <enumeration value="VARIABLE_NOT_BOUND_TO_VALUE">
            <annotation>
              <documentation>
                A bind variable has not been bound to a value.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="StringFormatError.Reason">
        <annotation>
          <documentation>
            The reasons for the target error.
          </documentation>
        </annotation>
        <restriction base="xsd:string">
          <enumeration value="UNKNOWN"/>
          <enumeration value="ILLEGAL_CHARS">
            <annotation>
              <documentation>
                The input string value contains disallowed characters.
              </documentation>
            </annotation>
          </enumeration>
          <enumeration value="INVALID_FORMAT">
            <annotation>
              <documentation>
                The input string value is invalid for the associated field.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <simpleType name="StringLengthError.Reason">
        <restriction base="xsd:string">
          <enumeration value="TOO_LONG"/>
          <enumeration value="TOO_SHORT"/>
          <enumeration value="UNKNOWN">
            <annotation>
              <documentation>
                The value returned if the actual value is not exposed by the requested API version.
              </documentation>
            </annotation>
          </enumeration>
        </restriction>
      </simpleType>
      <element name="createCreativeWrappers">
        <annotation>
          <documentation>
            Creates a new {@code CreativeWrapper} objects.
            
            The following fields are required:
            &lt;ul&gt;
            &lt;li&gt;{@link CreativeWrapper#labelId}&lt;/li&gt;
            &lt;li&gt;{@link CreativeWrapper#ordering}&lt;/li&gt;
            &lt;li&gt;{@link CreativeWrapper#header} or {@link CreativeWrapper#footer}&lt;/li&gt;
            &lt;/ul&gt;
            
            @param creativeWrappers the creative wrappers to create
            @return the creative wrappers with their IDs filled in
            @throws ApiException
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0"
              name="creativeWrappers" type="tns:CreativeWrapper"/>
          </sequence>
        </complexType>
      </element>
      <element name="createCreativeWrappersResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="rval" type="tns:CreativeWrapper"/>
          </sequence>
        </complexType>
      </element>
      <element name="ApiExceptionFault" type="tns:ApiException">
        <annotation>
          <documentation>
            A fault element of type ApiException.
          </documentation>
        </annotation>
      </element>
      <element name="getCreativeWrappersByStatement">
        <annotation>
          <documentation>
            Gets a {@link CreativeWrapperPage} of {@link CreativeWrapper}
            objects that satisfy the given {@link Statement#query}. The following
            fields are supported for filtering:
            
            &lt;table&gt;
            &lt;tr&gt;
            &lt;th scope="col"&gt;PQL Property&lt;/th&gt; &lt;th scope="col"&gt;Object Property&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code id}&lt;/td&gt;
            &lt;td&gt;{@link CreativeWrapper#id}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code labelId}&lt;/td&gt;
            &lt;td&gt;{@link CreativeWrapper#labelId}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code status}&lt;/td&gt;
            &lt;td&gt;{@link CreativeWrapper#status}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;{@code ordering}&lt;/td&gt;
            &lt;td&gt;{@link CreativeWrapper#ordering}&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/table&gt;
            
            @param filterStatement a Publisher Query Language statement used to filter
            a set of creative wrappers.
            @return the creative wrappers that match the given filter
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="filterStatement" type="tns:Statement"/>
          </sequence>
        </complexType>
      </element>
      <element name="getCreativeWrappersByStatementResponse">
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="rval" type="tns:CreativeWrapperPage"/>
          </sequence>
        </complexType>
      </element>
      <element name="performCreativeWrapperAction">
        <annotation>
          <documentation>
            Performs actions on {@link CreativeWrapper} objects that match the
            given {@link Statement#query}.
            
            @param creativeWrapperAction the action to perform
            @param filterStatement a Publisher Query Language statement used to filter
            a set of labels
            @return the result of the action performed
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0"
              name="creativeWrapperAction" type="tns:CreativeWrapperAction"/>
            <element maxOccurs="1" minOccurs="0" name="filterStatement" type="tns:Statement"/>
          </sequence>
        </complexType>
      </element>
      <element name="performCreativeWrapperActionResponse">
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="rval" type="tns:UpdateResult"/>
          </sequence>
        </complexType>
      </element>
      <element name="updateCreativeWrappers">
        <annotation>
          <documentation>
            Updates the specified {@code CreativeWrapper} objects.
            
            @param creativeWrappers the creative wrappers to update
            @return the updated creative wrapper objects
            @throws ApiException
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0"
              name="creativeWrappers" type="tns:CreativeWrapper"/>
          </sequence>
        </complexType>
      </element>
      <element name="updateCreativeWrappersResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="rval" type="tns:CreativeWrapper"/>
          </sequence>
        </complexType>
      </element>
      <element name="RequestHeader" type="tns:SoapRequestHeader"/>
      <element name="ResponseHeader" type="tns:SoapResponseHeader"/>
    </schema>
  </wsdl:types>
  <wsdl:message name="RequestHeader">
    <wsdl:part element="tns:RequestHeader" name="RequestHeader"/>
  </wsdl:message>
  <wsdl:message name="ResponseHeader">
    <wsdl:part element="tns:ResponseHeader" name="ResponseHeader"/>
  </wsdl:message>
  <wsdl:message name="createCreativeWrappersRequest">
    <wsdl:part element="tns:createCreativeWrappers" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="createCreativeWrappersResponse">
    <wsdl:part element="tns:createCreativeWrappersResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="ApiException">
    <wsdl:part element="tns:ApiExceptionFault" name="ApiException"/>
  </wsdl:message>
  <wsdl:message name="getCreativeWrappersByStatementRequest">
    <wsdl:part element="tns:getCreativeWrappersByStatement" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getCreativeWrappersByStatementResponse">
    <wsdl:part element="tns:getCreativeWrappersByStatementResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="performCreativeWrapperActionRequest">
    <wsdl:part element="tns:performCreativeWrapperAction" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="performCreativeWrapperActionResponse">
    <wsdl:part element="tns:performCreativeWrapperActionResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="updateCreativeWrappersRequest">
    <wsdl:part element="tns:updateCreativeWrappers" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="updateCreativeWrappersResponse">
    <wsdl:part element="tns:updateCreativeWrappersResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="CreativeWrapperServiceInterface">
    <wsdl:documentation>
      Provides methods for the creation and management of creative wrappers.
      {@link CreativeWrapper CreativeWrappers} allow HTML snippets to be
      served along with creatives.
      &lt;p&gt;
      Creative wrappers must be associated with a
      {@link LabelType#CREATIVE_WRAPPER} label and applied to ad units by
      {@link AdUnit#appliedLabels}.
    </wsdl:documentation>
    <wsdl:operation name="createCreativeWrappers">
      <wsdl:documentation>
        Creates a new {@code CreativeWrapper} objects.
        
        The following fields are required:
        &lt;ul&gt;
        &lt;li&gt;{@link CreativeWrapper#labelId}&lt;/li&gt;
        &lt;li&gt;{@link CreativeWrapper#ordering}&lt;/li&gt;
        &lt;li&gt;{@link CreativeWrapper#header} or {@link CreativeWrapper#footer}&lt;/li&gt;
        &lt;/ul&gt;
        
        @param creativeWrappers the creative wrappers to create
        @return the creative wrappers with their IDs filled in
        @throws ApiException
      </wsdl:documentation>
      <wsdl:input message="tns:createCreativeWrappersRequest" name="createCreativeWrappersRequest"/>
      <wsdl:output message="tns:createCreativeWrappersResponse" name="createCreativeWrappersResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="getCreativeWrappersByStatement">
      <wsdl:documentation>
        Gets a {@link CreativeWrapperPage} of {@link CreativeWrapper}
        objects that satisfy the given {@link Statement#query}. The following
        fields are supported for filtering:
        
        &lt;table&gt;
        &lt;tr&gt;
        &lt;th scope="col"&gt;PQL Property&lt;/th&gt; &lt;th scope="col"&gt;Object Property&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code id}&lt;/td&gt;
        &lt;td&gt;{@link CreativeWrapper#id}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code labelId}&lt;/td&gt;
        &lt;td&gt;{@link CreativeWrapper#labelId}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code status}&lt;/td&gt;
        &lt;td&gt;{@link CreativeWrapper#status}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;{@code ordering}&lt;/td&gt;
        &lt;td&gt;{@link CreativeWrapper#ordering}&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/table&gt;
        
        @param filterStatement a Publisher Query Language statement used to filter
        a set of creative wrappers.
        @return the creative wrappers that match the given filter
      </wsdl:documentation>
      <wsdl:input message="tns:getCreativeWrappersByStatementRequest" name="getCreativeWrappersByStatementRequest"/>
      <wsdl:output message="tns:getCreativeWrappersByStatementResponse" name="getCreativeWrappersByStatementResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="performCreativeWrapperAction">
      <wsdl:documentation>
        Performs actions on {@link CreativeWrapper} objects that match the
        given {@link Statement#query}.
        
        @param creativeWrapperAction the action to perform
        @param filterStatement a Publisher Query Language statement used to filter
        a set of labels
        @return the result of the action performed
      </wsdl:documentation>
      <wsdl:input message="tns:performCreativeWrapperActionRequest" name="performCreativeWrapperActionRequest"/>
      <wsdl:output message="tns:performCreativeWrapperActionResponse" name="performCreativeWrapperActionResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="updateCreativeWrappers">
      <wsdl:documentation>
        Updates the specified {@code CreativeWrapper} objects.
        
        @param creativeWrappers the creative wrappers to update
        @return the updated creative wrapper objects
        @throws ApiException
      </wsdl:documentation>
      <wsdl:input message="tns:updateCreativeWrappersRequest" name="updateCreativeWrappersRequest"/>
      <wsdl:output message="tns:updateCreativeWrappersResponse" name="updateCreativeWrappersResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="CreativeWrapperServiceSoapBinding" type="tns:CreativeWrapperServiceInterface">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="createCreativeWrappers">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="createCreativeWrappersRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="createCreativeWrappersResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getCreativeWrappersByStatement">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getCreativeWrappersByStatementRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getCreativeWrappersByStatementResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="performCreativeWrapperAction">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="performCreativeWrapperActionRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="performCreativeWrapperActionResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="updateCreativeWrappers">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="updateCreativeWrappersRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="updateCreativeWrappersResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="CreativeWrapperService">
    <wsdl:port binding="tns:CreativeWrapperServiceSoapBinding" name="CreativeWrapperServiceInterfacePort">
      <wsdlsoap:address location="https://ads.google.com/apis/ads/publisher/v202111/CreativeWrapperService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
