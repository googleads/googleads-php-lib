<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated file, do not edit -->
<!-- Copyright 2022 Google Inc. All Rights Reserved -->
<wsdl:definitions
  targetNamespace="https://www.google.com/apis/ads/publisher/v202111"
  xmlns:tns="https://www.google.com/apis/ads/publisher/v202111"
  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
  xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <schema elementFormDefault="qualified" jaxb:version="1.0"
      targetNamespace="https://www.google.com/apis/ads/publisher/v202111"
      xmlns="http://www.w3.org/2001/XMLSchema"
      xmlns:jaxb="http://java.sun.com/xml/ns/jaxb" xmlns:tns="https://www.google.com/apis/ads/publisher/v202111">
      <annotation>
        <appinfo>
          <jaxb:globalBindings typesafeEnumMaxMembers="999999"/>
        </appinfo>
      </annotation>
      <complexType abstract="true" name="ObjectValue">
        <complexContent>
          <extension base="tns:Value">
            <sequence/>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="AdBreak">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0"
            name="rootAdResponses" type="tns:AdResponse"/>
          <element maxOccurs="unbounded" minOccurs="0"
            name="adDecisionCreatives" type="tns:AdDecisionCreative"/>
          <element maxOccurs="1" minOccurs="0" name="podNum" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0"
            name="linearAbsolutePodNum" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0"
            name="adBreakDurationMillis" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0"
            name="filledDurationMillis" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0"
            name="servedDurationMillis" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0" name="startDateTime" type="tns:DateTime"/>
          <element maxOccurs="1" minOccurs="0"
            name="startTimeOffsetMillis" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0" name="samError" type="tns:SamError"/>
          <element maxOccurs="1" minOccurs="0" name="midrollIndex" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="decisionedAds" type="xsd:boolean"/>
          <element maxOccurs="unbounded" minOccurs="0"
            name="trackingEvents" type="tns:TrackingEvent"/>
        </sequence>
      </complexType>
      <complexType name="AdDecisionCreative">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="sequence" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="slateDurationMills" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0"
            name="creativeDurationMills" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0" name="creativeTranscode" type="tns:CreativeTranscode"/>
          <element maxOccurs="1" minOccurs="0" name="googleVideoId" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="samError" type="tns:SamError"/>
          <element maxOccurs="1" minOccurs="0" name="isTranscoded" type="xsd:boolean"/>
        </sequence>
      </complexType>
      <complexType name="AdResponse">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="requestUrl" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="isVmapRequest" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0" name="responseBody" type="xsd:string"/>
          <element maxOccurs="unbounded" minOccurs="0"
            name="redirectResponses" type="tns:AdResponse"/>
          <element maxOccurs="1" minOccurs="0" name="samError" type="tns:SamError"/>
          <element maxOccurs="unbounded" minOccurs="0" name="adErrors" type="tns:SamError"/>
        </sequence>
      </complexType>
      <complexType abstract="true" name="ApiError">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="fieldPath" type="xsd:string"/>
          <element maxOccurs="unbounded" minOccurs="0"
            name="fieldPathElements" type="tns:FieldPathElement"/>
          <element maxOccurs="1" minOccurs="0" name="trigger" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="errorString" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="ApiException">
        <complexContent>
          <extension base="tns:ApplicationException">
            <sequence>
              <element maxOccurs="unbounded" minOccurs="0" name="errors" type="tns:ApiError"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ApiVersionError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ApiVersionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ApplicationException">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="message" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="AuthenticationError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:AuthenticationError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="BooleanValue">
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:boolean"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CollectionSizeError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:CollectionSizeError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CommonError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:CommonError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="CreativeTranscode">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="adServer" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="creativeIdType" type="tns:CreativeTranscode.IdType"/>
          <element maxOccurs="1" minOccurs="0" name="creativeId" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="Date">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="year" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="month" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="day" type="xsd:int"/>
        </sequence>
      </complexType>
      <complexType name="DateTime">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="date" type="tns:Date"/>
          <element maxOccurs="1" minOccurs="0" name="hour" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="minute" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="second" type="xsd:int"/>
          <element maxOccurs="1" minOccurs="0" name="timeZoneId" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="DateTimeValue">
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="tns:DateTime"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="DateValue">
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="tns:Date"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FeatureError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:FeatureError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="FieldPathElement">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="field" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="index" type="xsd:int"/>
        </sequence>
      </complexType>
      <complexType name="InternalApiError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:InternalApiError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="LinearStreamCreateRequest">
        <complexContent>
          <extension base="tns:StreamCreateRequest">
            <sequence>
              <element maxOccurs="1" minOccurs="0"
                name="liveStreamEventAssetKey" type="xsd:string"/>
              <element maxOccurs="1" minOccurs="0" name="eventName" type="xsd:string"/>
              <element maxOccurs="1" minOccurs="0"
                name="liveStreamEventId" type="xsd:long"/>
              <element maxOccurs="1" minOccurs="0"
                name="eventStartDateTime" type="tns:DateTime"/>
              <element maxOccurs="1" minOccurs="0"
                name="eventEndDateTime" type="tns:DateTime"/>
              <element maxOccurs="1" minOccurs="0"
                name="prefetchEnabled" type="xsd:boolean"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NotNullError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:NotNullError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="NumberValue">
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:string"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ParseError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ParseError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PermissionError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PermissionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PublisherQueryLanguageContextError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PublisherQueryLanguageContextError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="PublisherQueryLanguageSyntaxError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:PublisherQueryLanguageSyntaxError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="QuotaError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:QuotaError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RequiredCollectionError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:RequiredCollectionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="RequiredError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:RequiredError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SamError">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="samErrorType" type="tns:SamErrorType"/>
          <element maxOccurs="1" minOccurs="0" name="errorDetails" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="SamSession">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="sessionId" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="isVodSession" type="xsd:boolean"/>
          <element maxOccurs="1" minOccurs="0"
            name="streamCreateRequest" type="tns:StreamCreateRequest"/>
          <element maxOccurs="unbounded" minOccurs="0" name="adBreaks" type="tns:AdBreak"/>
          <element maxOccurs="1" minOccurs="0" name="startDateTime" type="tns:DateTime"/>
          <element maxOccurs="1" minOccurs="0"
            name="sessionDurationMillis" type="xsd:long"/>
          <element maxOccurs="1" minOccurs="0"
            name="contentDurationMillis" type="xsd:long"/>
        </sequence>
      </complexType>
      <complexType name="SamSessionError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:SamSessionError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="ServerError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:ServerError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SetValue">
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="unbounded" minOccurs="0" name="values" type="tns:Value"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="SoapRequestHeader">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="networkCode" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="applicationName" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="SoapResponseHeader">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="requestId" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="responseTime" type="xsd:long"/>
        </sequence>
      </complexType>
      <complexType name="Statement">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="query" type="xsd:string"/>
          <element maxOccurs="unbounded" minOccurs="0" name="values" type="tns:String_ValueMapEntry"/>
        </sequence>
      </complexType>
      <complexType name="StatementError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StatementError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType abstract="true" name="StreamCreateRequest">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="url" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="userAgent" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="reportingType" type="tns:ReportingType"/>
        </sequence>
      </complexType>
      <complexType name="StringFormatError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StringFormatError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="StringLengthError">
        <complexContent>
          <extension base="tns:ApiError">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="reason" type="tns:StringLengthError.Reason"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="String_ValueMapEntry">
        <annotation>
          <documentation>
            This represents an entry in a map with a key of type String
            and value of type Value.
          </documentation>
        </annotation>
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="key" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="value" type="tns:Value"/>
        </sequence>
      </complexType>
      <complexType name="TextValue">
        <complexContent>
          <extension base="tns:Value">
            <sequence>
              <element maxOccurs="1" minOccurs="0" name="value" type="xsd:string"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <complexType name="TrackingEvent">
        <sequence>
          <element maxOccurs="unbounded" minOccurs="0" name="pings" type="tns:TrackingEvent.Ping"/>
        </sequence>
      </complexType>
      <complexType name="TrackingEvent.Ping">
        <sequence>
          <element maxOccurs="1" minOccurs="0" name="uri" type="xsd:string"/>
          <element maxOccurs="1" minOccurs="0" name="hasError" type="xsd:boolean"/>
        </sequence>
      </complexType>
      <complexType abstract="true" name="Value">
        <sequence/>
      </complexType>
      <complexType name="VodStreamCreateRequest">
        <complexContent>
          <extension base="tns:StreamCreateRequest">
            <sequence>
              <element maxOccurs="1" minOccurs="0"
                name="contentSourceId" type="xsd:long"/>
              <element maxOccurs="1" minOccurs="0" name="videoId" type="xsd:string"/>
              <element maxOccurs="1" minOccurs="0" name="contentId" type="xsd:long"/>
              <element maxOccurs="1" minOccurs="0" name="contentName" type="xsd:string"/>
              <element maxOccurs="unbounded" minOccurs="0"
                name="cuePoints" type="xsd:long"/>
            </sequence>
          </extension>
        </complexContent>
      </complexType>
      <simpleType name="ApiVersionError.Reason">
        <restriction base="xsd:string">
          <enumeration value="UPDATE_TO_NEWER_VERSION"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="AuthenticationError.Reason">
        <restriction base="xsd:string">
          <enumeration value="AMBIGUOUS_SOAP_REQUEST_HEADER"/>
          <enumeration value="INVALID_EMAIL"/>
          <enumeration value="AUTHENTICATION_FAILED"/>
          <enumeration value="INVALID_OAUTH_SIGNATURE"/>
          <enumeration value="INVALID_SERVICE"/>
          <enumeration value="MISSING_SOAP_REQUEST_HEADER"/>
          <enumeration value="MISSING_AUTHENTICATION_HTTP_HEADER"/>
          <enumeration value="MISSING_AUTHENTICATION"/>
          <enumeration value="NETWORK_API_ACCESS_DISABLED"/>
          <enumeration value="NO_NETWORKS_TO_ACCESS"/>
          <enumeration value="NETWORK_NOT_FOUND"/>
          <enumeration value="NETWORK_CODE_REQUIRED"/>
          <enumeration value="CONNECTION_ERROR"/>
          <enumeration value="GOOGLE_ACCOUNT_ALREADY_ASSOCIATED_WITH_NETWORK"/>
          <enumeration value="UNDER_INVESTIGATION"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="CollectionSizeError.Reason">
        <restriction base="xsd:string">
          <enumeration value="TOO_LARGE"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="CommonError.Reason">
        <restriction base="xsd:string">
          <enumeration value="NOT_FOUND"/>
          <enumeration value="ALREADY_EXISTS"/>
          <enumeration value="NOT_APPLICABLE"/>
          <enumeration value="DUPLICATE_OBJECT"/>
          <enumeration value="CANNOT_UPDATE"/>
          <enumeration value="UNSUPPORTED_OPERATION"/>
          <enumeration value="CONCURRENT_MODIFICATION"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="CreativeTranscode.IdType">
        <restriction base="xsd:string">
          <enumeration value="AD_ID"/>
          <enumeration value="CREATIVE_ID"/>
          <enumeration value="CREATIVE_ADID"/>
          <enumeration value="UNIVERSAL_AD_ID"/>
          <enumeration value="MEDIA_URI"/>
          <enumeration value="MEDIA_URI_PATH"/>
          <enumeration value="CREATIVE_ADID_WITH_FALLBACK"/>
          <enumeration value="CANONICALIZED_MEDIA_URI"/>
          <enumeration value="GV_REGISTRY_ID"/>
          <enumeration value="UNKNOWN_ID_TYPE"/>
          <enumeration value="MEDIA_URI_HASH"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="FeatureError.Reason">
        <restriction base="xsd:string">
          <enumeration value="MISSING_FEATURE"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="InternalApiError.Reason">
        <restriction base="xsd:string">
          <enumeration value="UNEXPECTED_INTERNAL_API_ERROR"/>
          <enumeration value="TRANSIENT_ERROR"/>
          <enumeration value="UNKNOWN"/>
          <enumeration value="DOWNTIME"/>
          <enumeration value="ERROR_GENERATING_RESPONSE"/>
        </restriction>
      </simpleType>
      <simpleType name="NotNullError.Reason">
        <restriction base="xsd:string">
          <enumeration value="ARG1_NULL"/>
          <enumeration value="ARG2_NULL"/>
          <enumeration value="ARG3_NULL"/>
          <enumeration value="NULL"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="ParseError.Reason">
        <restriction base="xsd:string">
          <enumeration value="UNPARSABLE"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="PermissionError.Reason">
        <restriction base="xsd:string">
          <enumeration value="PERMISSION_DENIED"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="PublisherQueryLanguageContextError.Reason">
        <restriction base="xsd:string">
          <enumeration value="UNEXECUTABLE"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="PublisherQueryLanguageSyntaxError.Reason">
        <restriction base="xsd:string">
          <enumeration value="UNPARSABLE"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="QuotaError.Reason">
        <restriction base="xsd:string">
          <enumeration value="EXCEEDED_QUOTA"/>
          <enumeration value="UNKNOWN"/>
          <enumeration value="REPORT_JOB_LIMIT"/>
        </restriction>
      </simpleType>
      <simpleType name="ReportingType">
        <restriction base="xsd:string">
          <enumeration value="DISABLED"/>
          <enumeration value="CLIENT"/>
          <enumeration value="SERVER"/>
          <enumeration value="AD_MEDIA"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="RequiredCollectionError.Reason">
        <restriction base="xsd:string">
          <enumeration value="REQUIRED"/>
          <enumeration value="TOO_LARGE"/>
          <enumeration value="TOO_SMALL"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="RequiredError.Reason">
        <restriction base="xsd:string">
          <enumeration value="REQUIRED"/>
        </restriction>
      </simpleType>
      <simpleType name="SamErrorType">
        <restriction base="xsd:string">
          <enumeration value="INTERNAL_ERROR"/>
          <enumeration value="AD_REQUEST_ERROR"/>
          <enumeration value="VAST_PARSE_ERROR"/>
          <enumeration value="UNSUPPORTED_AD_SYSTEM"/>
          <enumeration value="CANNOT_FIND_UNIQUE_TRANSCODE_ID"/>
          <enumeration value="CANNOT_FIND_MEDIA_FILE_PATH"/>
          <enumeration value="MISSING_INLINE_ELEMENTS"/>
          <enumeration value="MAX_WRAPPER_DEPTH_REACHED"/>
          <enumeration value="INVALID_AD_SEQUENCE_NUMBER"/>
          <enumeration value="FAILED_PING"/>
          <enumeration value="AD_TAG_PARSE_ERROR"/>
          <enumeration value="VMAP_PARSE_ERROR"/>
          <enumeration value="INVALID_VMAP_RESPONSE"/>
          <enumeration value="NO_AD_BREAKS_IN_VMAP"/>
          <enumeration value="CUSTOM_AD_SOURCE_IN_VMAP"/>
          <enumeration value="AD_BREAK_TYPE_NOT_SUPPORTED"/>
          <enumeration value="NEITHER_AD_SOURCE_NOR_TRACKING"/>
          <enumeration value="UNKNOWN_ERROR"/>
          <enumeration value="AD_POD_DROPPED_TO_MANY_AD_PODS"/>
          <enumeration value="AD_POD_DROPPED_EMPTY_ADS"/>
          <enumeration value="AD_BREAK_WITHOUT_AD_POD"/>
          <enumeration value="TRANSCODING_IN_PROGRESS"/>
          <enumeration value="UNSUPPORTED_VAST_VERSION"/>
          <enumeration value="AD_POD_DROPPED_BUMPER_ERROR"/>
          <enumeration value="NO_VALID_MEDIAFILES_FOUND"/>
          <enumeration value="EXCEEDS_MAX_FILLER"/>
          <enumeration value="SKIPPABLE_AD_NOT_SUPPORTED"/>
          <enumeration value="AD_REQUEST_TIMEOUT"/>
          <enumeration value="AD_POD_DROPPED_UNSUPPORTED_TYPE"/>
          <enumeration value="DUPLICATE_AD_TAG"/>
          <enumeration value="FOLLOW_REDIRECTS_IS_FALSE"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="SamSessionError.Reason">
        <restriction base="xsd:string">
          <enumeration value="COULD_NOT_REGISTER_SESSION"/>
          <enumeration value="MALFORMED_SESSION_ID"/>
          <enumeration value="INVALID_SESSION_ID"/>
          <enumeration value="INVALID_DEBUG_KEY"/>
          <enumeration value="REQUEST_EXCEEDS_SESSION_LIMIT"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="ServerError.Reason">
        <restriction base="xsd:string">
          <enumeration value="SERVER_ERROR"/>
          <enumeration value="SERVER_BUSY"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="StatementError.Reason">
        <restriction base="xsd:string">
          <enumeration value="VARIABLE_NOT_BOUND_TO_VALUE"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <simpleType name="StringFormatError.Reason">
        <restriction base="xsd:string">
          <enumeration value="UNKNOWN"/>
          <enumeration value="ILLEGAL_CHARS"/>
          <enumeration value="INVALID_FORMAT"/>
        </restriction>
      </simpleType>
      <simpleType name="StringLengthError.Reason">
        <restriction base="xsd:string">
          <enumeration value="TOO_LONG"/>
          <enumeration value="TOO_SHORT"/>
          <enumeration value="UNKNOWN"/>
        </restriction>
      </simpleType>
      <element name="getSamSessionsByStatement">
        <annotation>
          <documentation>
            Returns the logging information for a DAI session. A DAI session can be identified by it's
            session id or debug key. The session ID must be registered via the {@code
            registerSessionsForMonitoring} method before it can be accessed. There may be some delay before
            the session is available.
            
            &lt;p&gt;The number of sessions requested is limited to 25. The following fields are supported for
            filtering:
            
            &lt;table&gt;
            &lt;tbody&gt;
            &lt;tr&gt;
            &lt;th&gt;Entity property&lt;/th&gt;
            &lt;th&gt;PQL filter&lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;
            Session id
            &lt;/td&gt;
            &lt;td&gt;
            'sessionId'
            &lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
            &lt;td&gt;
            Debug key
            &lt;/td&gt;
            &lt;td&gt;
            'debugKey"
            &lt;/td&gt;
            &lt;/tr&gt;
            &lt;/tbody&gt;
            &lt;/table&gt;
            
            @param statement PQL specifying the sessionId or debugKey to fetch logging information for.
            Only '=' and 'IN' expressions are supported.
            @throws ApiException if there is an error while fetching the logging information or if there is
            no SAM session is associated with any of the {@code sessionIds}.
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="1" minOccurs="0" name="statement" type="tns:Statement"/>
          </sequence>
        </complexType>
      </element>
      <element name="getSamSessionsByStatementResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="rval" type="tns:SamSession"/>
          </sequence>
        </complexType>
      </element>
      <element name="ApiExceptionFault" type="tns:ApiException">
        <annotation>
          <documentation>
            A fault element of type ApiException.
          </documentation>
        </annotation>
      </element>
      <element name="registerSessionsForMonitoring">
        <annotation>
          <documentation>
            Registers the specified list of {@code sessionIds} for monitoring. Once the session IDs have
            been registered, all logged information about the sessions will be persisted and can be viewed
            via the Ad Manager UI.
            
            &lt;p&gt;A session ID is a unique identifier of a single user watching a live stream event.
            
            @param sessionIds a list of session IDs to register for monitoring
            @return the list of session IDs that were registered for monitoring
            @throws ApiException if there is an error registering any of the session IDs
          </documentation>
        </annotation>
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0"
              name="sessionIds" type="xsd:string"/>
          </sequence>
        </complexType>
      </element>
      <element name="registerSessionsForMonitoringResponse">
        <complexType>
          <sequence>
            <element maxOccurs="unbounded" minOccurs="0" name="rval" type="xsd:string"/>
          </sequence>
        </complexType>
      </element>
      <element name="RequestHeader" type="tns:SoapRequestHeader"/>
      <element name="ResponseHeader" type="tns:SoapResponseHeader"/>
    </schema>
  </wsdl:types>
  <wsdl:message name="RequestHeader">
    <wsdl:part element="tns:RequestHeader" name="RequestHeader"/>
  </wsdl:message>
  <wsdl:message name="ResponseHeader">
    <wsdl:part element="tns:ResponseHeader" name="ResponseHeader"/>
  </wsdl:message>
  <wsdl:message name="getSamSessionsByStatementRequest">
    <wsdl:part element="tns:getSamSessionsByStatement" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="getSamSessionsByStatementResponse">
    <wsdl:part element="tns:getSamSessionsByStatementResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="ApiException">
    <wsdl:part element="tns:ApiExceptionFault" name="ApiException"/>
  </wsdl:message>
  <wsdl:message name="registerSessionsForMonitoringRequest">
    <wsdl:part element="tns:registerSessionsForMonitoring" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="registerSessionsForMonitoringResponse">
    <wsdl:part element="tns:registerSessionsForMonitoringResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="StreamActivityMonitorServiceInterface">
    <wsdl:operation name="getSamSessionsByStatement">
      <wsdl:documentation>
        Returns the logging information for a DAI session. A DAI session can be identified by it's
        session id or debug key. The session ID must be registered via the {@code
        registerSessionsForMonitoring} method before it can be accessed. There may be some delay before
        the session is available.
        
        &lt;p&gt;The number of sessions requested is limited to 25. The following fields are supported for
        filtering:
        
        &lt;table&gt;
        &lt;tbody&gt;
        &lt;tr&gt;
        &lt;th&gt;Entity property&lt;/th&gt;
        &lt;th&gt;PQL filter&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;
        Session id
        &lt;/td&gt;
        &lt;td&gt;
        'sessionId'
        &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
        &lt;td&gt;
        Debug key
        &lt;/td&gt;
        &lt;td&gt;
        'debugKey"
        &lt;/td&gt;
        &lt;/tr&gt;
        &lt;/tbody&gt;
        &lt;/table&gt;
        
        @param statement PQL specifying the sessionId or debugKey to fetch logging information for.
        Only '=' and 'IN' expressions are supported.
        @throws ApiException if there is an error while fetching the logging information or if there is
        no SAM session is associated with any of the {@code sessionIds}.
      </wsdl:documentation>
      <wsdl:input message="tns:getSamSessionsByStatementRequest" name="getSamSessionsByStatementRequest"/>
      <wsdl:output message="tns:getSamSessionsByStatementResponse" name="getSamSessionsByStatementResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
    <wsdl:operation name="registerSessionsForMonitoring">
      <wsdl:documentation>
        Registers the specified list of {@code sessionIds} for monitoring. Once the session IDs have
        been registered, all logged information about the sessions will be persisted and can be viewed
        via the Ad Manager UI.
        
        &lt;p&gt;A session ID is a unique identifier of a single user watching a live stream event.
        
        @param sessionIds a list of session IDs to register for monitoring
        @return the list of session IDs that were registered for monitoring
        @throws ApiException if there is an error registering any of the session IDs
      </wsdl:documentation>
      <wsdl:input message="tns:registerSessionsForMonitoringRequest" name="registerSessionsForMonitoringRequest"/>
      <wsdl:output message="tns:registerSessionsForMonitoringResponse" name="registerSessionsForMonitoringResponse"/>
      <wsdl:fault message="tns:ApiException" name="ApiException"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="StreamActivityMonitorServiceSoapBinding" type="tns:StreamActivityMonitorServiceInterface">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getSamSessionsByStatement">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getSamSessionsByStatementRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSamSessionsByStatementResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="registerSessionsForMonitoring">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="registerSessionsForMonitoringRequest">
        <wsdlsoap:header message="tns:RequestHeader"
          part="RequestHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="registerSessionsForMonitoringResponse">
        <wsdlsoap:header message="tns:ResponseHeader"
          part="ResponseHeader" use="literal"/>
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="ApiException">
        <wsdlsoap:fault name="ApiException" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="StreamActivityMonitorService">
    <wsdl:port binding="tns:StreamActivityMonitorServiceSoapBinding" name="StreamActivityMonitorServiceInterfacePort">
      <wsdlsoap:address location="https://ads.google.com/apis/ads/publisher/v202111/StreamActivityMonitorService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>
